Search.setIndex({"docnames": ["api/ncem.estimators.Estimator", "api/ncem.estimators.Estimator.a", "api/ncem.estimators.Estimator.adj_type", "api/ncem.estimators.Estimator.complete_img_keys", "api/ncem.estimators.Estimator.cond_depth", "api/ncem.estimators.Estimator.cond_type", "api/ncem.estimators.Estimator.covar_selection", "api/ncem.estimators.Estimator.domains", "api/ncem.estimators.Estimator.evaluate_any", "api/ncem.estimators.Estimator.evaluate_per_node_type", "api/ncem.estimators.Estimator.get_data", "api/ncem.estimators.Estimator.graph_covar", "api/ncem.estimators.Estimator.graph_covar_names", "api/ncem.estimators.Estimator.h_0", "api/ncem.estimators.Estimator.h_1", "api/ncem.estimators.Estimator.img_keys_all", "api/ncem.estimators.Estimator.img_to_patient_dict", "api/ncem.estimators.Estimator.init_model", "api/ncem.estimators.Estimator.log_transform", "api/ncem.estimators.Estimator.max_nodes", "api/ncem.estimators.Estimator.model_type", "api/ncem.estimators.Estimator.n_domains", "api/ncem.estimators.Estimator.n_eval_nodes_per_graph", "api/ncem.estimators.Estimator.n_features_0", "api/ncem.estimators.Estimator.n_features_1", "api/ncem.estimators.Estimator.n_features_standard", "api/ncem.estimators.Estimator.n_features_type", "api/ncem.estimators.Estimator.n_graph_covariates", "api/ncem.estimators.Estimator.n_node_covariates", "api/ncem.estimators.Estimator.node_covar", "api/ncem.estimators.Estimator.node_feature_names", "api/ncem.estimators.Estimator.node_type_names", "api/ncem.estimators.Estimator.node_types", "api/ncem.estimators.Estimator.nodes_idx_all", "api/ncem.estimators.Estimator.nodes_idx_eval", "api/ncem.estimators.Estimator.nodes_idx_test", "api/ncem.estimators.Estimator.nodes_idx_train", "api/ncem.estimators.Estimator.output_layer", "api/ncem.estimators.Estimator.patient_ids_bytarget", "api/ncem.estimators.Estimator.patient_ids_unique", "api/ncem.estimators.Estimator.predict", "api/ncem.estimators.Estimator.pretrain_decoder", "api/ncem.estimators.Estimator.size_factors", "api/ncem.estimators.Estimator.split_data_given", "api/ncem.estimators.Estimator.split_data_node", "api/ncem.estimators.Estimator.split_data_target_cell", "api/ncem.estimators.Estimator.steps_per_epoch", "api/ncem.estimators.Estimator.train", "api/ncem.estimators.Estimator.train_aggressive", "api/ncem.estimators.Estimator.train_normal", "api/ncem.estimators.Estimator.validation_steps", "api/ncem.estimators.Estimator.vi_model", "api/ncem.estimators.EstimatorCVAE", "api/ncem.estimators.EstimatorCVAE.evaluate_any", "api/ncem.estimators.EstimatorCVAE.evaluate_any_posterior_sampling", "api/ncem.estimators.EstimatorCVAE.evaluate_per_node_type", "api/ncem.estimators.EstimatorCVAE.get_data", "api/ncem.estimators.EstimatorCVAE.img_keys_all", "api/ncem.estimators.EstimatorCVAE.init_model", "api/ncem.estimators.EstimatorCVAE.nodes_idx_all", "api/ncem.estimators.EstimatorCVAE.nodes_idx_eval", "api/ncem.estimators.EstimatorCVAE.nodes_idx_test", "api/ncem.estimators.EstimatorCVAE.nodes_idx_train", "api/ncem.estimators.EstimatorCVAE.patient_ids_bytarget", "api/ncem.estimators.EstimatorCVAE.patient_ids_unique", "api/ncem.estimators.EstimatorCVAE.predict", "api/ncem.estimators.EstimatorCVAE.pretrain_decoder", "api/ncem.estimators.EstimatorCVAE.split_data_given", "api/ncem.estimators.EstimatorCVAE.split_data_node", "api/ncem.estimators.EstimatorCVAE.split_data_target_cell", "api/ncem.estimators.EstimatorCVAE.train", "api/ncem.estimators.EstimatorCVAE.train_aggressive", "api/ncem.estimators.EstimatorCVAE.train_normal", "api/ncem.estimators.EstimatorCVAEncem", "api/ncem.estimators.EstimatorCVAEncem.evaluate_any", "api/ncem.estimators.EstimatorCVAEncem.evaluate_any_posterior_sampling", "api/ncem.estimators.EstimatorCVAEncem.evaluate_per_node_type", "api/ncem.estimators.EstimatorCVAEncem.get_data", "api/ncem.estimators.EstimatorCVAEncem.img_keys_all", "api/ncem.estimators.EstimatorCVAEncem.init_model", "api/ncem.estimators.EstimatorCVAEncem.nodes_idx_all", "api/ncem.estimators.EstimatorCVAEncem.nodes_idx_eval", "api/ncem.estimators.EstimatorCVAEncem.nodes_idx_test", "api/ncem.estimators.EstimatorCVAEncem.nodes_idx_train", "api/ncem.estimators.EstimatorCVAEncem.patient_ids_bytarget", "api/ncem.estimators.EstimatorCVAEncem.patient_ids_unique", "api/ncem.estimators.EstimatorCVAEncem.predict", "api/ncem.estimators.EstimatorCVAEncem.pretrain_decoder", "api/ncem.estimators.EstimatorCVAEncem.split_data_given", "api/ncem.estimators.EstimatorCVAEncem.split_data_node", "api/ncem.estimators.EstimatorCVAEncem.split_data_target_cell", "api/ncem.estimators.EstimatorCVAEncem.train", "api/ncem.estimators.EstimatorCVAEncem.train_aggressive", "api/ncem.estimators.EstimatorCVAEncem.train_normal", "api/ncem.estimators.EstimatorED", "api/ncem.estimators.EstimatorED.evaluate_any", "api/ncem.estimators.EstimatorED.evaluate_per_node_type", "api/ncem.estimators.EstimatorED.get_data", "api/ncem.estimators.EstimatorED.img_keys_all", "api/ncem.estimators.EstimatorED.init_model", "api/ncem.estimators.EstimatorED.nodes_idx_all", "api/ncem.estimators.EstimatorED.nodes_idx_eval", "api/ncem.estimators.EstimatorED.nodes_idx_test", "api/ncem.estimators.EstimatorED.nodes_idx_train", "api/ncem.estimators.EstimatorED.patient_ids_bytarget", "api/ncem.estimators.EstimatorED.patient_ids_unique", "api/ncem.estimators.EstimatorED.predict", "api/ncem.estimators.EstimatorED.pretrain_decoder", "api/ncem.estimators.EstimatorED.split_data_given", "api/ncem.estimators.EstimatorED.split_data_node", "api/ncem.estimators.EstimatorED.split_data_target_cell", "api/ncem.estimators.EstimatorED.train", "api/ncem.estimators.EstimatorED.train_aggressive", "api/ncem.estimators.EstimatorED.train_normal", "api/ncem.estimators.EstimatorEDncem", "api/ncem.estimators.EstimatorEDncem.evaluate_any", "api/ncem.estimators.EstimatorEDncem.evaluate_per_node_type", "api/ncem.estimators.EstimatorEDncem.get_data", "api/ncem.estimators.EstimatorEDncem.get_decoding_weights", "api/ncem.estimators.EstimatorEDncem.img_keys_all", "api/ncem.estimators.EstimatorEDncem.init_model", "api/ncem.estimators.EstimatorEDncem.nodes_idx_all", "api/ncem.estimators.EstimatorEDncem.nodes_idx_eval", "api/ncem.estimators.EstimatorEDncem.nodes_idx_test", "api/ncem.estimators.EstimatorEDncem.nodes_idx_train", "api/ncem.estimators.EstimatorEDncem.patient_ids_bytarget", "api/ncem.estimators.EstimatorEDncem.patient_ids_unique", "api/ncem.estimators.EstimatorEDncem.predict", "api/ncem.estimators.EstimatorEDncem.predict_embedding_any", "api/ncem.estimators.EstimatorEDncem.pretrain_decoder", "api/ncem.estimators.EstimatorEDncem.split_data_given", "api/ncem.estimators.EstimatorEDncem.split_data_node", "api/ncem.estimators.EstimatorEDncem.split_data_target_cell", "api/ncem.estimators.EstimatorEDncem.train", "api/ncem.estimators.EstimatorEDncem.train_aggressive", "api/ncem.estimators.EstimatorEDncem.train_normal", "api/ncem.estimators.EstimatorGraph", "api/ncem.estimators.EstimatorGraph.evaluate_any", "api/ncem.estimators.EstimatorGraph.evaluate_per_node_type", "api/ncem.estimators.EstimatorGraph.get_data", "api/ncem.estimators.EstimatorGraph.img_keys_all", "api/ncem.estimators.EstimatorGraph.init_model", "api/ncem.estimators.EstimatorGraph.nodes_idx_all", "api/ncem.estimators.EstimatorGraph.nodes_idx_eval", "api/ncem.estimators.EstimatorGraph.nodes_idx_test", "api/ncem.estimators.EstimatorGraph.nodes_idx_train", "api/ncem.estimators.EstimatorGraph.patient_ids_bytarget", "api/ncem.estimators.EstimatorGraph.patient_ids_unique", "api/ncem.estimators.EstimatorGraph.predict", "api/ncem.estimators.EstimatorGraph.pretrain_decoder", "api/ncem.estimators.EstimatorGraph.split_data_given", "api/ncem.estimators.EstimatorGraph.split_data_node", "api/ncem.estimators.EstimatorGraph.split_data_target_cell", "api/ncem.estimators.EstimatorGraph.train", "api/ncem.estimators.EstimatorGraph.train_aggressive", "api/ncem.estimators.EstimatorGraph.train_normal", "api/ncem.estimators.EstimatorInteractions", "api/ncem.estimators.EstimatorInteractions.evaluate_any", "api/ncem.estimators.EstimatorInteractions.evaluate_per_node_type", "api/ncem.estimators.EstimatorInteractions.get_data", "api/ncem.estimators.EstimatorInteractions.img_keys_all", "api/ncem.estimators.EstimatorInteractions.init_model", "api/ncem.estimators.EstimatorInteractions.nodes_idx_all", "api/ncem.estimators.EstimatorInteractions.nodes_idx_eval", "api/ncem.estimators.EstimatorInteractions.nodes_idx_test", "api/ncem.estimators.EstimatorInteractions.nodes_idx_train", "api/ncem.estimators.EstimatorInteractions.patient_ids_bytarget", "api/ncem.estimators.EstimatorInteractions.patient_ids_unique", "api/ncem.estimators.EstimatorInteractions.predict", "api/ncem.estimators.EstimatorInteractions.pretrain_decoder", "api/ncem.estimators.EstimatorInteractions.split_data_given", "api/ncem.estimators.EstimatorInteractions.split_data_node", "api/ncem.estimators.EstimatorInteractions.split_data_target_cell", "api/ncem.estimators.EstimatorInteractions.train", "api/ncem.estimators.EstimatorInteractions.train_aggressive", "api/ncem.estimators.EstimatorInteractions.train_normal", "api/ncem.estimators.EstimatorLinear", "api/ncem.estimators.EstimatorLinear.evaluate_any", "api/ncem.estimators.EstimatorLinear.evaluate_per_node_type", "api/ncem.estimators.EstimatorLinear.get_data", "api/ncem.estimators.EstimatorLinear.img_keys_all", "api/ncem.estimators.EstimatorLinear.init_model", "api/ncem.estimators.EstimatorLinear.nodes_idx_all", "api/ncem.estimators.EstimatorLinear.nodes_idx_eval", "api/ncem.estimators.EstimatorLinear.nodes_idx_test", "api/ncem.estimators.EstimatorLinear.nodes_idx_train", "api/ncem.estimators.EstimatorLinear.patient_ids_bytarget", "api/ncem.estimators.EstimatorLinear.patient_ids_unique", "api/ncem.estimators.EstimatorLinear.predict", "api/ncem.estimators.EstimatorLinear.pretrain_decoder", "api/ncem.estimators.EstimatorLinear.split_data_given", "api/ncem.estimators.EstimatorLinear.split_data_node", "api/ncem.estimators.EstimatorLinear.split_data_target_cell", "api/ncem.estimators.EstimatorLinear.train", "api/ncem.estimators.EstimatorLinear.train_aggressive", "api/ncem.estimators.EstimatorLinear.train_normal", "api/ncem.estimators.EstimatorNoGraph", "api/ncem.estimators.EstimatorNoGraph.evaluate_any", "api/ncem.estimators.EstimatorNoGraph.evaluate_per_node_type", "api/ncem.estimators.EstimatorNoGraph.get_data", "api/ncem.estimators.EstimatorNoGraph.img_keys_all", "api/ncem.estimators.EstimatorNoGraph.init_model", "api/ncem.estimators.EstimatorNoGraph.nodes_idx_all", "api/ncem.estimators.EstimatorNoGraph.nodes_idx_eval", "api/ncem.estimators.EstimatorNoGraph.nodes_idx_test", "api/ncem.estimators.EstimatorNoGraph.nodes_idx_train", "api/ncem.estimators.EstimatorNoGraph.patient_ids_bytarget", "api/ncem.estimators.EstimatorNoGraph.patient_ids_unique", "api/ncem.estimators.EstimatorNoGraph.predict", "api/ncem.estimators.EstimatorNoGraph.pretrain_decoder", "api/ncem.estimators.EstimatorNoGraph.split_data_given", "api/ncem.estimators.EstimatorNoGraph.split_data_node", "api/ncem.estimators.EstimatorNoGraph.split_data_target_cell", "api/ncem.estimators.EstimatorNoGraph.train", "api/ncem.estimators.EstimatorNoGraph.train_aggressive", "api/ncem.estimators.EstimatorNoGraph.train_normal", "api/ncem.models.ModelCVAE", "api/ncem.models.ModelCVAEncem", "api/ncem.models.ModelED", "api/ncem.models.ModelEDncem", "api/ncem.models.ModelInteractions", "api/ncem.models.ModelLinear", "api/ncem.train.GridSearchContainer", "api/ncem.train.GridSearchContainer.copy_best_model", "api/ncem.train.GridSearchContainer.cv_ids", "api/ncem.train.GridSearchContainer.cv_keys", "api/ncem.train.GridSearchContainer.get_best_model_id", "api/ncem.train.GridSearchContainer.get_info", "api/ncem.train.GridSearchContainer.load_gs", "api/ncem.train.GridSearchContainer.load_target_cell_evaluation", "api/ncem.train.GridSearchContainer.plot_best_model_by_hyperparam", "api/ncem.train.GridSearchContainer.plot_target_cell_evaluation", "api/ncem.train.GridSearchContainer.run_ids_clean", "api/ncem.train.GridSearchContainer.runparams", "api/ncem.train.GridSearchContainer.select_cv", "api/ncem.train.GridSearchContainer.source_gs", "api/ncem.train.GridSearchContainer.target_cell_evals", "api/ncem.train.GridSearchContainer.target_cell_indices", "api/ncem.train.GridSearchContainer.target_cell_runparams", "api/ncem.train.TrainModelCVAE", "api/ncem.train.TrainModelCVAE.estimator", "api/ncem.train.TrainModelCVAE.init_estim", "api/ncem.train.TrainModelCVAE.save", "api/ncem.train.TrainModelCVAE.save_time", "api/ncem.train.TrainModelCVAEncem", "api/ncem.train.TrainModelCVAEncem.estimator", "api/ncem.train.TrainModelCVAEncem.init_estim", "api/ncem.train.TrainModelCVAEncem.save", "api/ncem.train.TrainModelCVAEncem.save_time", "api/ncem.train.TrainModelED", "api/ncem.train.TrainModelED.estimator", "api/ncem.train.TrainModelED.init_estim", "api/ncem.train.TrainModelED.save", "api/ncem.train.TrainModelED.save_time", "api/ncem.train.TrainModelEDncem", "api/ncem.train.TrainModelEDncem.estimator", "api/ncem.train.TrainModelEDncem.init_estim", "api/ncem.train.TrainModelEDncem.save", "api/ncem.train.TrainModelEDncem.save_time", "api/ncem.train.TrainModelInteractions", "api/ncem.train.TrainModelInteractions.estimator", "api/ncem.train.TrainModelInteractions.init_estim", "api/ncem.train.TrainModelInteractions.save", "api/ncem.train.TrainModelInteractions.save_time", "api/ncem.train.TrainModelLinear", "api/ncem.train.TrainModelLinear.estimator", "api/ncem.train.TrainModelLinear.init_estim", "api/ncem.train.TrainModelLinear.save", "api/ncem.train.TrainModelLinear.save_time", "authors", "code_of_conduct", "contributing", "ecosystem", "index", "installation", "readme", "reference", "tutorials", "usage"], "filenames": ["api/ncem.estimators.Estimator.rst", "api/ncem.estimators.Estimator.a.rst", "api/ncem.estimators.Estimator.adj_type.rst", "api/ncem.estimators.Estimator.complete_img_keys.rst", "api/ncem.estimators.Estimator.cond_depth.rst", "api/ncem.estimators.Estimator.cond_type.rst", "api/ncem.estimators.Estimator.covar_selection.rst", "api/ncem.estimators.Estimator.domains.rst", "api/ncem.estimators.Estimator.evaluate_any.rst", "api/ncem.estimators.Estimator.evaluate_per_node_type.rst", "api/ncem.estimators.Estimator.get_data.rst", "api/ncem.estimators.Estimator.graph_covar.rst", "api/ncem.estimators.Estimator.graph_covar_names.rst", "api/ncem.estimators.Estimator.h_0.rst", "api/ncem.estimators.Estimator.h_1.rst", "api/ncem.estimators.Estimator.img_keys_all.rst", "api/ncem.estimators.Estimator.img_to_patient_dict.rst", "api/ncem.estimators.Estimator.init_model.rst", "api/ncem.estimators.Estimator.log_transform.rst", "api/ncem.estimators.Estimator.max_nodes.rst", "api/ncem.estimators.Estimator.model_type.rst", "api/ncem.estimators.Estimator.n_domains.rst", "api/ncem.estimators.Estimator.n_eval_nodes_per_graph.rst", "api/ncem.estimators.Estimator.n_features_0.rst", "api/ncem.estimators.Estimator.n_features_1.rst", "api/ncem.estimators.Estimator.n_features_standard.rst", "api/ncem.estimators.Estimator.n_features_type.rst", "api/ncem.estimators.Estimator.n_graph_covariates.rst", "api/ncem.estimators.Estimator.n_node_covariates.rst", "api/ncem.estimators.Estimator.node_covar.rst", "api/ncem.estimators.Estimator.node_feature_names.rst", "api/ncem.estimators.Estimator.node_type_names.rst", "api/ncem.estimators.Estimator.node_types.rst", "api/ncem.estimators.Estimator.nodes_idx_all.rst", "api/ncem.estimators.Estimator.nodes_idx_eval.rst", "api/ncem.estimators.Estimator.nodes_idx_test.rst", "api/ncem.estimators.Estimator.nodes_idx_train.rst", "api/ncem.estimators.Estimator.output_layer.rst", "api/ncem.estimators.Estimator.patient_ids_bytarget.rst", "api/ncem.estimators.Estimator.patient_ids_unique.rst", "api/ncem.estimators.Estimator.predict.rst", "api/ncem.estimators.Estimator.pretrain_decoder.rst", "api/ncem.estimators.Estimator.size_factors.rst", "api/ncem.estimators.Estimator.split_data_given.rst", "api/ncem.estimators.Estimator.split_data_node.rst", "api/ncem.estimators.Estimator.split_data_target_cell.rst", "api/ncem.estimators.Estimator.steps_per_epoch.rst", "api/ncem.estimators.Estimator.train.rst", "api/ncem.estimators.Estimator.train_aggressive.rst", "api/ncem.estimators.Estimator.train_normal.rst", "api/ncem.estimators.Estimator.validation_steps.rst", "api/ncem.estimators.Estimator.vi_model.rst", "api/ncem.estimators.EstimatorCVAE.rst", "api/ncem.estimators.EstimatorCVAE.evaluate_any.rst", "api/ncem.estimators.EstimatorCVAE.evaluate_any_posterior_sampling.rst", "api/ncem.estimators.EstimatorCVAE.evaluate_per_node_type.rst", "api/ncem.estimators.EstimatorCVAE.get_data.rst", "api/ncem.estimators.EstimatorCVAE.img_keys_all.rst", "api/ncem.estimators.EstimatorCVAE.init_model.rst", "api/ncem.estimators.EstimatorCVAE.nodes_idx_all.rst", "api/ncem.estimators.EstimatorCVAE.nodes_idx_eval.rst", "api/ncem.estimators.EstimatorCVAE.nodes_idx_test.rst", "api/ncem.estimators.EstimatorCVAE.nodes_idx_train.rst", "api/ncem.estimators.EstimatorCVAE.patient_ids_bytarget.rst", "api/ncem.estimators.EstimatorCVAE.patient_ids_unique.rst", "api/ncem.estimators.EstimatorCVAE.predict.rst", "api/ncem.estimators.EstimatorCVAE.pretrain_decoder.rst", "api/ncem.estimators.EstimatorCVAE.split_data_given.rst", "api/ncem.estimators.EstimatorCVAE.split_data_node.rst", "api/ncem.estimators.EstimatorCVAE.split_data_target_cell.rst", "api/ncem.estimators.EstimatorCVAE.train.rst", "api/ncem.estimators.EstimatorCVAE.train_aggressive.rst", "api/ncem.estimators.EstimatorCVAE.train_normal.rst", "api/ncem.estimators.EstimatorCVAEncem.rst", "api/ncem.estimators.EstimatorCVAEncem.evaluate_any.rst", "api/ncem.estimators.EstimatorCVAEncem.evaluate_any_posterior_sampling.rst", "api/ncem.estimators.EstimatorCVAEncem.evaluate_per_node_type.rst", "api/ncem.estimators.EstimatorCVAEncem.get_data.rst", "api/ncem.estimators.EstimatorCVAEncem.img_keys_all.rst", "api/ncem.estimators.EstimatorCVAEncem.init_model.rst", "api/ncem.estimators.EstimatorCVAEncem.nodes_idx_all.rst", "api/ncem.estimators.EstimatorCVAEncem.nodes_idx_eval.rst", "api/ncem.estimators.EstimatorCVAEncem.nodes_idx_test.rst", "api/ncem.estimators.EstimatorCVAEncem.nodes_idx_train.rst", "api/ncem.estimators.EstimatorCVAEncem.patient_ids_bytarget.rst", "api/ncem.estimators.EstimatorCVAEncem.patient_ids_unique.rst", "api/ncem.estimators.EstimatorCVAEncem.predict.rst", "api/ncem.estimators.EstimatorCVAEncem.pretrain_decoder.rst", "api/ncem.estimators.EstimatorCVAEncem.split_data_given.rst", "api/ncem.estimators.EstimatorCVAEncem.split_data_node.rst", "api/ncem.estimators.EstimatorCVAEncem.split_data_target_cell.rst", "api/ncem.estimators.EstimatorCVAEncem.train.rst", "api/ncem.estimators.EstimatorCVAEncem.train_aggressive.rst", "api/ncem.estimators.EstimatorCVAEncem.train_normal.rst", "api/ncem.estimators.EstimatorED.rst", "api/ncem.estimators.EstimatorED.evaluate_any.rst", "api/ncem.estimators.EstimatorED.evaluate_per_node_type.rst", "api/ncem.estimators.EstimatorED.get_data.rst", "api/ncem.estimators.EstimatorED.img_keys_all.rst", "api/ncem.estimators.EstimatorED.init_model.rst", "api/ncem.estimators.EstimatorED.nodes_idx_all.rst", "api/ncem.estimators.EstimatorED.nodes_idx_eval.rst", "api/ncem.estimators.EstimatorED.nodes_idx_test.rst", "api/ncem.estimators.EstimatorED.nodes_idx_train.rst", "api/ncem.estimators.EstimatorED.patient_ids_bytarget.rst", "api/ncem.estimators.EstimatorED.patient_ids_unique.rst", "api/ncem.estimators.EstimatorED.predict.rst", "api/ncem.estimators.EstimatorED.pretrain_decoder.rst", "api/ncem.estimators.EstimatorED.split_data_given.rst", "api/ncem.estimators.EstimatorED.split_data_node.rst", "api/ncem.estimators.EstimatorED.split_data_target_cell.rst", "api/ncem.estimators.EstimatorED.train.rst", "api/ncem.estimators.EstimatorED.train_aggressive.rst", "api/ncem.estimators.EstimatorED.train_normal.rst", "api/ncem.estimators.EstimatorEDncem.rst", "api/ncem.estimators.EstimatorEDncem.evaluate_any.rst", "api/ncem.estimators.EstimatorEDncem.evaluate_per_node_type.rst", "api/ncem.estimators.EstimatorEDncem.get_data.rst", "api/ncem.estimators.EstimatorEDncem.get_decoding_weights.rst", "api/ncem.estimators.EstimatorEDncem.img_keys_all.rst", "api/ncem.estimators.EstimatorEDncem.init_model.rst", "api/ncem.estimators.EstimatorEDncem.nodes_idx_all.rst", "api/ncem.estimators.EstimatorEDncem.nodes_idx_eval.rst", "api/ncem.estimators.EstimatorEDncem.nodes_idx_test.rst", "api/ncem.estimators.EstimatorEDncem.nodes_idx_train.rst", "api/ncem.estimators.EstimatorEDncem.patient_ids_bytarget.rst", "api/ncem.estimators.EstimatorEDncem.patient_ids_unique.rst", "api/ncem.estimators.EstimatorEDncem.predict.rst", "api/ncem.estimators.EstimatorEDncem.predict_embedding_any.rst", "api/ncem.estimators.EstimatorEDncem.pretrain_decoder.rst", "api/ncem.estimators.EstimatorEDncem.split_data_given.rst", "api/ncem.estimators.EstimatorEDncem.split_data_node.rst", "api/ncem.estimators.EstimatorEDncem.split_data_target_cell.rst", "api/ncem.estimators.EstimatorEDncem.train.rst", "api/ncem.estimators.EstimatorEDncem.train_aggressive.rst", "api/ncem.estimators.EstimatorEDncem.train_normal.rst", "api/ncem.estimators.EstimatorGraph.rst", "api/ncem.estimators.EstimatorGraph.evaluate_any.rst", "api/ncem.estimators.EstimatorGraph.evaluate_per_node_type.rst", "api/ncem.estimators.EstimatorGraph.get_data.rst", "api/ncem.estimators.EstimatorGraph.img_keys_all.rst", "api/ncem.estimators.EstimatorGraph.init_model.rst", "api/ncem.estimators.EstimatorGraph.nodes_idx_all.rst", "api/ncem.estimators.EstimatorGraph.nodes_idx_eval.rst", "api/ncem.estimators.EstimatorGraph.nodes_idx_test.rst", "api/ncem.estimators.EstimatorGraph.nodes_idx_train.rst", "api/ncem.estimators.EstimatorGraph.patient_ids_bytarget.rst", "api/ncem.estimators.EstimatorGraph.patient_ids_unique.rst", "api/ncem.estimators.EstimatorGraph.predict.rst", "api/ncem.estimators.EstimatorGraph.pretrain_decoder.rst", "api/ncem.estimators.EstimatorGraph.split_data_given.rst", "api/ncem.estimators.EstimatorGraph.split_data_node.rst", "api/ncem.estimators.EstimatorGraph.split_data_target_cell.rst", "api/ncem.estimators.EstimatorGraph.train.rst", "api/ncem.estimators.EstimatorGraph.train_aggressive.rst", "api/ncem.estimators.EstimatorGraph.train_normal.rst", "api/ncem.estimators.EstimatorInteractions.rst", "api/ncem.estimators.EstimatorInteractions.evaluate_any.rst", "api/ncem.estimators.EstimatorInteractions.evaluate_per_node_type.rst", "api/ncem.estimators.EstimatorInteractions.get_data.rst", "api/ncem.estimators.EstimatorInteractions.img_keys_all.rst", "api/ncem.estimators.EstimatorInteractions.init_model.rst", "api/ncem.estimators.EstimatorInteractions.nodes_idx_all.rst", "api/ncem.estimators.EstimatorInteractions.nodes_idx_eval.rst", "api/ncem.estimators.EstimatorInteractions.nodes_idx_test.rst", "api/ncem.estimators.EstimatorInteractions.nodes_idx_train.rst", "api/ncem.estimators.EstimatorInteractions.patient_ids_bytarget.rst", "api/ncem.estimators.EstimatorInteractions.patient_ids_unique.rst", "api/ncem.estimators.EstimatorInteractions.predict.rst", "api/ncem.estimators.EstimatorInteractions.pretrain_decoder.rst", "api/ncem.estimators.EstimatorInteractions.split_data_given.rst", "api/ncem.estimators.EstimatorInteractions.split_data_node.rst", "api/ncem.estimators.EstimatorInteractions.split_data_target_cell.rst", "api/ncem.estimators.EstimatorInteractions.train.rst", "api/ncem.estimators.EstimatorInteractions.train_aggressive.rst", "api/ncem.estimators.EstimatorInteractions.train_normal.rst", "api/ncem.estimators.EstimatorLinear.rst", "api/ncem.estimators.EstimatorLinear.evaluate_any.rst", "api/ncem.estimators.EstimatorLinear.evaluate_per_node_type.rst", "api/ncem.estimators.EstimatorLinear.get_data.rst", "api/ncem.estimators.EstimatorLinear.img_keys_all.rst", "api/ncem.estimators.EstimatorLinear.init_model.rst", "api/ncem.estimators.EstimatorLinear.nodes_idx_all.rst", "api/ncem.estimators.EstimatorLinear.nodes_idx_eval.rst", "api/ncem.estimators.EstimatorLinear.nodes_idx_test.rst", "api/ncem.estimators.EstimatorLinear.nodes_idx_train.rst", "api/ncem.estimators.EstimatorLinear.patient_ids_bytarget.rst", "api/ncem.estimators.EstimatorLinear.patient_ids_unique.rst", "api/ncem.estimators.EstimatorLinear.predict.rst", "api/ncem.estimators.EstimatorLinear.pretrain_decoder.rst", "api/ncem.estimators.EstimatorLinear.split_data_given.rst", "api/ncem.estimators.EstimatorLinear.split_data_node.rst", "api/ncem.estimators.EstimatorLinear.split_data_target_cell.rst", "api/ncem.estimators.EstimatorLinear.train.rst", "api/ncem.estimators.EstimatorLinear.train_aggressive.rst", "api/ncem.estimators.EstimatorLinear.train_normal.rst", "api/ncem.estimators.EstimatorNoGraph.rst", "api/ncem.estimators.EstimatorNoGraph.evaluate_any.rst", "api/ncem.estimators.EstimatorNoGraph.evaluate_per_node_type.rst", "api/ncem.estimators.EstimatorNoGraph.get_data.rst", "api/ncem.estimators.EstimatorNoGraph.img_keys_all.rst", "api/ncem.estimators.EstimatorNoGraph.init_model.rst", "api/ncem.estimators.EstimatorNoGraph.nodes_idx_all.rst", "api/ncem.estimators.EstimatorNoGraph.nodes_idx_eval.rst", "api/ncem.estimators.EstimatorNoGraph.nodes_idx_test.rst", "api/ncem.estimators.EstimatorNoGraph.nodes_idx_train.rst", "api/ncem.estimators.EstimatorNoGraph.patient_ids_bytarget.rst", "api/ncem.estimators.EstimatorNoGraph.patient_ids_unique.rst", "api/ncem.estimators.EstimatorNoGraph.predict.rst", "api/ncem.estimators.EstimatorNoGraph.pretrain_decoder.rst", "api/ncem.estimators.EstimatorNoGraph.split_data_given.rst", "api/ncem.estimators.EstimatorNoGraph.split_data_node.rst", "api/ncem.estimators.EstimatorNoGraph.split_data_target_cell.rst", "api/ncem.estimators.EstimatorNoGraph.train.rst", "api/ncem.estimators.EstimatorNoGraph.train_aggressive.rst", "api/ncem.estimators.EstimatorNoGraph.train_normal.rst", "api/ncem.models.ModelCVAE.rst", "api/ncem.models.ModelCVAEncem.rst", "api/ncem.models.ModelED.rst", "api/ncem.models.ModelEDncem.rst", "api/ncem.models.ModelInteractions.rst", "api/ncem.models.ModelLinear.rst", "api/ncem.train.GridSearchContainer.rst", "api/ncem.train.GridSearchContainer.copy_best_model.rst", "api/ncem.train.GridSearchContainer.cv_ids.rst", "api/ncem.train.GridSearchContainer.cv_keys.rst", "api/ncem.train.GridSearchContainer.get_best_model_id.rst", "api/ncem.train.GridSearchContainer.get_info.rst", "api/ncem.train.GridSearchContainer.load_gs.rst", "api/ncem.train.GridSearchContainer.load_target_cell_evaluation.rst", "api/ncem.train.GridSearchContainer.plot_best_model_by_hyperparam.rst", "api/ncem.train.GridSearchContainer.plot_target_cell_evaluation.rst", "api/ncem.train.GridSearchContainer.run_ids_clean.rst", "api/ncem.train.GridSearchContainer.runparams.rst", "api/ncem.train.GridSearchContainer.select_cv.rst", "api/ncem.train.GridSearchContainer.source_gs.rst", "api/ncem.train.GridSearchContainer.target_cell_evals.rst", "api/ncem.train.GridSearchContainer.target_cell_indices.rst", "api/ncem.train.GridSearchContainer.target_cell_runparams.rst", "api/ncem.train.TrainModelCVAE.rst", "api/ncem.train.TrainModelCVAE.estimator.rst", "api/ncem.train.TrainModelCVAE.init_estim.rst", "api/ncem.train.TrainModelCVAE.save.rst", "api/ncem.train.TrainModelCVAE.save_time.rst", "api/ncem.train.TrainModelCVAEncem.rst", "api/ncem.train.TrainModelCVAEncem.estimator.rst", "api/ncem.train.TrainModelCVAEncem.init_estim.rst", "api/ncem.train.TrainModelCVAEncem.save.rst", "api/ncem.train.TrainModelCVAEncem.save_time.rst", "api/ncem.train.TrainModelED.rst", "api/ncem.train.TrainModelED.estimator.rst", "api/ncem.train.TrainModelED.init_estim.rst", "api/ncem.train.TrainModelED.save.rst", "api/ncem.train.TrainModelED.save_time.rst", "api/ncem.train.TrainModelEDncem.rst", "api/ncem.train.TrainModelEDncem.estimator.rst", "api/ncem.train.TrainModelEDncem.init_estim.rst", "api/ncem.train.TrainModelEDncem.save.rst", "api/ncem.train.TrainModelEDncem.save_time.rst", "api/ncem.train.TrainModelInteractions.rst", "api/ncem.train.TrainModelInteractions.estimator.rst", "api/ncem.train.TrainModelInteractions.init_estim.rst", "api/ncem.train.TrainModelInteractions.save.rst", "api/ncem.train.TrainModelInteractions.save_time.rst", "api/ncem.train.TrainModelLinear.rst", "api/ncem.train.TrainModelLinear.estimator.rst", "api/ncem.train.TrainModelLinear.init_estim.rst", "api/ncem.train.TrainModelLinear.save.rst", "api/ncem.train.TrainModelLinear.save_time.rst", "authors.rst", "code_of_conduct.rst", "contributing.rst", "ecosystem.rst", "index.rst", "installation.rst", "readme.rst", "reference.rst", "tutorials.rst", "usage.rst"], "titles": ["ncem.estimators.Estimator", "ncem.estimators.Estimator.a", "ncem.estimators.Estimator.adj_type", "ncem.estimators.Estimator.complete_img_keys", "ncem.estimators.Estimator.cond_depth", "ncem.estimators.Estimator.cond_type", "ncem.estimators.Estimator.covar_selection", "ncem.estimators.Estimator.domains", "ncem.estimators.Estimator.evaluate_any", "ncem.estimators.Estimator.evaluate_per_node_type", "ncem.estimators.Estimator.get_data", "ncem.estimators.Estimator.graph_covar", "ncem.estimators.Estimator.graph_covar_names", "ncem.estimators.Estimator.h_0", "ncem.estimators.Estimator.h_1", "ncem.estimators.Estimator.img_keys_all", "ncem.estimators.Estimator.img_to_patient_dict", "ncem.estimators.Estimator.init_model", "ncem.estimators.Estimator.log_transform", "ncem.estimators.Estimator.max_nodes", "ncem.estimators.Estimator.model_type", "ncem.estimators.Estimator.n_domains", "ncem.estimators.Estimator.n_eval_nodes_per_graph", "ncem.estimators.Estimator.n_features_0", "ncem.estimators.Estimator.n_features_1", "ncem.estimators.Estimator.n_features_standard", "ncem.estimators.Estimator.n_features_type", "ncem.estimators.Estimator.n_graph_covariates", "ncem.estimators.Estimator.n_node_covariates", "ncem.estimators.Estimator.node_covar", "ncem.estimators.Estimator.node_feature_names", "ncem.estimators.Estimator.node_type_names", "ncem.estimators.Estimator.node_types", "ncem.estimators.Estimator.nodes_idx_all", "ncem.estimators.Estimator.nodes_idx_eval", "ncem.estimators.Estimator.nodes_idx_test", "ncem.estimators.Estimator.nodes_idx_train", "ncem.estimators.Estimator.output_layer", "ncem.estimators.Estimator.patient_ids_bytarget", "ncem.estimators.Estimator.patient_ids_unique", "ncem.estimators.Estimator.predict", "ncem.estimators.Estimator.pretrain_decoder", "ncem.estimators.Estimator.size_factors", "ncem.estimators.Estimator.split_data_given", "ncem.estimators.Estimator.split_data_node", "ncem.estimators.Estimator.split_data_target_cell", "ncem.estimators.Estimator.steps_per_epoch", "ncem.estimators.Estimator.train", "ncem.estimators.Estimator.train_aggressive", "ncem.estimators.Estimator.train_normal", "ncem.estimators.Estimator.validation_steps", "ncem.estimators.Estimator.vi_model", "ncem.estimators.EstimatorCVAE", "ncem.estimators.EstimatorCVAE.evaluate_any", "ncem.estimators.EstimatorCVAE.evaluate_any_posterior_sampling", "ncem.estimators.EstimatorCVAE.evaluate_per_node_type", "ncem.estimators.EstimatorCVAE.get_data", "ncem.estimators.EstimatorCVAE.img_keys_all", "ncem.estimators.EstimatorCVAE.init_model", "ncem.estimators.EstimatorCVAE.nodes_idx_all", "ncem.estimators.EstimatorCVAE.nodes_idx_eval", "ncem.estimators.EstimatorCVAE.nodes_idx_test", "ncem.estimators.EstimatorCVAE.nodes_idx_train", "ncem.estimators.EstimatorCVAE.patient_ids_bytarget", "ncem.estimators.EstimatorCVAE.patient_ids_unique", "ncem.estimators.EstimatorCVAE.predict", "ncem.estimators.EstimatorCVAE.pretrain_decoder", "ncem.estimators.EstimatorCVAE.split_data_given", "ncem.estimators.EstimatorCVAE.split_data_node", "ncem.estimators.EstimatorCVAE.split_data_target_cell", "ncem.estimators.EstimatorCVAE.train", "ncem.estimators.EstimatorCVAE.train_aggressive", "ncem.estimators.EstimatorCVAE.train_normal", "ncem.estimators.EstimatorCVAEncem", "ncem.estimators.EstimatorCVAEncem.evaluate_any", "ncem.estimators.EstimatorCVAEncem.evaluate_any_posterior_sampling", "ncem.estimators.EstimatorCVAEncem.evaluate_per_node_type", "ncem.estimators.EstimatorCVAEncem.get_data", "ncem.estimators.EstimatorCVAEncem.img_keys_all", "ncem.estimators.EstimatorCVAEncem.init_model", "ncem.estimators.EstimatorCVAEncem.nodes_idx_all", "ncem.estimators.EstimatorCVAEncem.nodes_idx_eval", "ncem.estimators.EstimatorCVAEncem.nodes_idx_test", "ncem.estimators.EstimatorCVAEncem.nodes_idx_train", "ncem.estimators.EstimatorCVAEncem.patient_ids_bytarget", "ncem.estimators.EstimatorCVAEncem.patient_ids_unique", "ncem.estimators.EstimatorCVAEncem.predict", "ncem.estimators.EstimatorCVAEncem.pretrain_decoder", "ncem.estimators.EstimatorCVAEncem.split_data_given", "ncem.estimators.EstimatorCVAEncem.split_data_node", "ncem.estimators.EstimatorCVAEncem.split_data_target_cell", "ncem.estimators.EstimatorCVAEncem.train", "ncem.estimators.EstimatorCVAEncem.train_aggressive", "ncem.estimators.EstimatorCVAEncem.train_normal", "ncem.estimators.EstimatorED", "ncem.estimators.EstimatorED.evaluate_any", "ncem.estimators.EstimatorED.evaluate_per_node_type", "ncem.estimators.EstimatorED.get_data", "ncem.estimators.EstimatorED.img_keys_all", "ncem.estimators.EstimatorED.init_model", "ncem.estimators.EstimatorED.nodes_idx_all", "ncem.estimators.EstimatorED.nodes_idx_eval", "ncem.estimators.EstimatorED.nodes_idx_test", "ncem.estimators.EstimatorED.nodes_idx_train", "ncem.estimators.EstimatorED.patient_ids_bytarget", "ncem.estimators.EstimatorED.patient_ids_unique", "ncem.estimators.EstimatorED.predict", "ncem.estimators.EstimatorED.pretrain_decoder", "ncem.estimators.EstimatorED.split_data_given", "ncem.estimators.EstimatorED.split_data_node", "ncem.estimators.EstimatorED.split_data_target_cell", "ncem.estimators.EstimatorED.train", "ncem.estimators.EstimatorED.train_aggressive", "ncem.estimators.EstimatorED.train_normal", "ncem.estimators.EstimatorEDncem", "ncem.estimators.EstimatorEDncem.evaluate_any", "ncem.estimators.EstimatorEDncem.evaluate_per_node_type", "ncem.estimators.EstimatorEDncem.get_data", "ncem.estimators.EstimatorEDncem.get_decoding_weights", "ncem.estimators.EstimatorEDncem.img_keys_all", "ncem.estimators.EstimatorEDncem.init_model", "ncem.estimators.EstimatorEDncem.nodes_idx_all", "ncem.estimators.EstimatorEDncem.nodes_idx_eval", "ncem.estimators.EstimatorEDncem.nodes_idx_test", "ncem.estimators.EstimatorEDncem.nodes_idx_train", "ncem.estimators.EstimatorEDncem.patient_ids_bytarget", "ncem.estimators.EstimatorEDncem.patient_ids_unique", "ncem.estimators.EstimatorEDncem.predict", "ncem.estimators.EstimatorEDncem.predict_embedding_any", "ncem.estimators.EstimatorEDncem.pretrain_decoder", "ncem.estimators.EstimatorEDncem.split_data_given", "ncem.estimators.EstimatorEDncem.split_data_node", "ncem.estimators.EstimatorEDncem.split_data_target_cell", "ncem.estimators.EstimatorEDncem.train", "ncem.estimators.EstimatorEDncem.train_aggressive", "ncem.estimators.EstimatorEDncem.train_normal", "ncem.estimators.EstimatorGraph", "ncem.estimators.EstimatorGraph.evaluate_any", "ncem.estimators.EstimatorGraph.evaluate_per_node_type", "ncem.estimators.EstimatorGraph.get_data", "ncem.estimators.EstimatorGraph.img_keys_all", "ncem.estimators.EstimatorGraph.init_model", "ncem.estimators.EstimatorGraph.nodes_idx_all", "ncem.estimators.EstimatorGraph.nodes_idx_eval", "ncem.estimators.EstimatorGraph.nodes_idx_test", "ncem.estimators.EstimatorGraph.nodes_idx_train", "ncem.estimators.EstimatorGraph.patient_ids_bytarget", "ncem.estimators.EstimatorGraph.patient_ids_unique", "ncem.estimators.EstimatorGraph.predict", "ncem.estimators.EstimatorGraph.pretrain_decoder", "ncem.estimators.EstimatorGraph.split_data_given", "ncem.estimators.EstimatorGraph.split_data_node", "ncem.estimators.EstimatorGraph.split_data_target_cell", "ncem.estimators.EstimatorGraph.train", "ncem.estimators.EstimatorGraph.train_aggressive", "ncem.estimators.EstimatorGraph.train_normal", "ncem.estimators.EstimatorInteractions", "ncem.estimators.EstimatorInteractions.evaluate_any", "ncem.estimators.EstimatorInteractions.evaluate_per_node_type", "ncem.estimators.EstimatorInteractions.get_data", "ncem.estimators.EstimatorInteractions.img_keys_all", "ncem.estimators.EstimatorInteractions.init_model", "ncem.estimators.EstimatorInteractions.nodes_idx_all", "ncem.estimators.EstimatorInteractions.nodes_idx_eval", "ncem.estimators.EstimatorInteractions.nodes_idx_test", "ncem.estimators.EstimatorInteractions.nodes_idx_train", "ncem.estimators.EstimatorInteractions.patient_ids_bytarget", "ncem.estimators.EstimatorInteractions.patient_ids_unique", "ncem.estimators.EstimatorInteractions.predict", "ncem.estimators.EstimatorInteractions.pretrain_decoder", "ncem.estimators.EstimatorInteractions.split_data_given", "ncem.estimators.EstimatorInteractions.split_data_node", "ncem.estimators.EstimatorInteractions.split_data_target_cell", "ncem.estimators.EstimatorInteractions.train", "ncem.estimators.EstimatorInteractions.train_aggressive", "ncem.estimators.EstimatorInteractions.train_normal", "ncem.estimators.EstimatorLinear", "ncem.estimators.EstimatorLinear.evaluate_any", "ncem.estimators.EstimatorLinear.evaluate_per_node_type", "ncem.estimators.EstimatorLinear.get_data", "ncem.estimators.EstimatorLinear.img_keys_all", "ncem.estimators.EstimatorLinear.init_model", "ncem.estimators.EstimatorLinear.nodes_idx_all", "ncem.estimators.EstimatorLinear.nodes_idx_eval", "ncem.estimators.EstimatorLinear.nodes_idx_test", "ncem.estimators.EstimatorLinear.nodes_idx_train", "ncem.estimators.EstimatorLinear.patient_ids_bytarget", "ncem.estimators.EstimatorLinear.patient_ids_unique", "ncem.estimators.EstimatorLinear.predict", "ncem.estimators.EstimatorLinear.pretrain_decoder", "ncem.estimators.EstimatorLinear.split_data_given", "ncem.estimators.EstimatorLinear.split_data_node", "ncem.estimators.EstimatorLinear.split_data_target_cell", "ncem.estimators.EstimatorLinear.train", "ncem.estimators.EstimatorLinear.train_aggressive", "ncem.estimators.EstimatorLinear.train_normal", "ncem.estimators.EstimatorNoGraph", "ncem.estimators.EstimatorNoGraph.evaluate_any", "ncem.estimators.EstimatorNoGraph.evaluate_per_node_type", "ncem.estimators.EstimatorNoGraph.get_data", "ncem.estimators.EstimatorNoGraph.img_keys_all", "ncem.estimators.EstimatorNoGraph.init_model", "ncem.estimators.EstimatorNoGraph.nodes_idx_all", "ncem.estimators.EstimatorNoGraph.nodes_idx_eval", "ncem.estimators.EstimatorNoGraph.nodes_idx_test", "ncem.estimators.EstimatorNoGraph.nodes_idx_train", "ncem.estimators.EstimatorNoGraph.patient_ids_bytarget", "ncem.estimators.EstimatorNoGraph.patient_ids_unique", "ncem.estimators.EstimatorNoGraph.predict", "ncem.estimators.EstimatorNoGraph.pretrain_decoder", "ncem.estimators.EstimatorNoGraph.split_data_given", "ncem.estimators.EstimatorNoGraph.split_data_node", "ncem.estimators.EstimatorNoGraph.split_data_target_cell", "ncem.estimators.EstimatorNoGraph.train", "ncem.estimators.EstimatorNoGraph.train_aggressive", "ncem.estimators.EstimatorNoGraph.train_normal", "ncem.models.ModelCVAE", "ncem.models.ModelCVAEncem", "ncem.models.ModelED", "ncem.models.ModelEDncem", "ncem.models.ModelInteractions", "ncem.models.ModelLinear", "ncem.train.GridSearchContainer", "ncem.train.GridSearchContainer.copy_best_model", "ncem.train.GridSearchContainer.cv_ids", "ncem.train.GridSearchContainer.cv_keys", "ncem.train.GridSearchContainer.get_best_model_id", "ncem.train.GridSearchContainer.get_info", "ncem.train.GridSearchContainer.load_gs", "ncem.train.GridSearchContainer.load_target_cell_evaluation", "ncem.train.GridSearchContainer.plot_best_model_by_hyperparam", "ncem.train.GridSearchContainer.plot_target_cell_evaluation", "ncem.train.GridSearchContainer.run_ids_clean", "ncem.train.GridSearchContainer.runparams", "ncem.train.GridSearchContainer.select_cv", "ncem.train.GridSearchContainer.source_gs", "ncem.train.GridSearchContainer.target_cell_evals", "ncem.train.GridSearchContainer.target_cell_indices", "ncem.train.GridSearchContainer.target_cell_runparams", "ncem.train.TrainModelCVAE", "ncem.train.TrainModelCVAE.estimator", "ncem.train.TrainModelCVAE.init_estim", "ncem.train.TrainModelCVAE.save", "ncem.train.TrainModelCVAE.save_time", "ncem.train.TrainModelCVAEncem", "ncem.train.TrainModelCVAEncem.estimator", "ncem.train.TrainModelCVAEncem.init_estim", "ncem.train.TrainModelCVAEncem.save", "ncem.train.TrainModelCVAEncem.save_time", "ncem.train.TrainModelED", "ncem.train.TrainModelED.estimator", "ncem.train.TrainModelED.init_estim", "ncem.train.TrainModelED.save", "ncem.train.TrainModelED.save_time", "ncem.train.TrainModelEDncem", "ncem.train.TrainModelEDncem.estimator", "ncem.train.TrainModelEDncem.init_estim", "ncem.train.TrainModelEDncem.save", "ncem.train.TrainModelEDncem.save_time", "ncem.train.TrainModelInteractions", "ncem.train.TrainModelInteractions.estimator", "ncem.train.TrainModelInteractions.init_estim", "ncem.train.TrainModelInteractions.save", "ncem.train.TrainModelInteractions.save_time", "ncem.train.TrainModelLinear", "ncem.train.TrainModelLinear.estimator", "ncem.train.TrainModelLinear.init_estim", "ncem.train.TrainModelLinear.save", "ncem.train.TrainModelLinear.save_time", "Credits", "Contributor Covenant Code of Conduct", "Contributor Guide", "Ecosystem", "Welcome to ncem\u2019s documentation!", "Installation", "ncem", "Reference", "Tutorials", "API"], "terms": {"class": [0, 10, 52, 56, 73, 77, 94, 97, 114, 117, 136, 139, 156, 159, 176, 179, 196, 199, 216, 217, 218, 219, 220, 221, 222, 225, 230, 239, 244, 249, 254, 259, 264, 271, 273], "sourc": [0, 8, 9, 10, 17, 40, 41, 43, 44, 45, 47, 48, 49, 52, 54, 58, 73, 75, 79, 94, 99, 114, 120, 136, 141, 156, 161, 176, 181, 196, 201, 216, 217, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 234, 239, 241, 244, 246, 249, 251, 254, 256, 259, 261, 264, 266, 271, 273], "model": [0, 8, 9, 17, 40, 41, 47, 48, 49, 52, 53, 54, 55, 65, 66, 70, 71, 72, 73, 74, 75, 76, 86, 87, 91, 92, 93, 94, 95, 96, 99, 106, 107, 111, 112, 113, 114, 115, 116, 127, 129, 133, 134, 135, 136, 137, 138, 148, 149, 153, 154, 155, 156, 157, 158, 168, 169, 173, 174, 175, 176, 177, 178, 188, 189, 193, 194, 195, 196, 197, 198, 208, 209, 213, 214, 215, 223, 226, 227, 228, 230, 273, 275, 277], "contain": [0, 271], "all": [0, 15, 33, 57, 59, 78, 80, 98, 100, 119, 121, 140, 142, 160, 162, 180, 182, 200, 202, 228, 229, 270], "necessari": 0, "method": [0, 52, 73, 94, 114, 136, 156, 176, 196, 216, 217, 218, 219, 220, 221, 222, 239, 244, 249, 254, 259, 264, 274], "data": [0, 8, 10, 41, 43, 47, 48, 49, 53, 56, 66, 67, 70, 71, 72, 74, 77, 87, 88, 91, 92, 93, 95, 97, 107, 108, 111, 112, 113, 115, 117, 128, 129, 130, 133, 134, 135, 137, 139, 149, 150, 153, 154, 155, 157, 159, 169, 170, 173, 174, 175, 177, 179, 189, 190, 193, 194, 195, 197, 199, 209, 210, 213, 214, 215, 271, 272], "load": [0, 228, 229], "initi": [0, 17, 58, 79, 99, 120, 141, 161, 181, 201], "train": [0, 41, 43, 44, 45, 48, 49, 66, 67, 68, 69, 71, 72, 87, 88, 89, 90, 92, 93, 107, 108, 109, 110, 112, 113, 129, 130, 131, 132, 134, 135, 149, 150, 151, 152, 154, 155, 169, 170, 171, 172, 174, 175, 189, 190, 191, 192, 194, 195, 209, 210, 211, 212, 214, 215, 273], "evalu": [0, 8, 9, 43, 44, 45, 53, 54, 55, 67, 68, 69, 74, 75, 76, 88, 89, 90, 95, 96, 108, 109, 110, 115, 116, 130, 131, 132, 137, 138, 150, 151, 152, 157, 158, 170, 171, 172, 177, 178, 190, 191, 192, 197, 198, 210, 211, 212, 229, 231, 277, 278], "predict": [0, 128], "attribut": [0, 52, 73, 94, 114, 136, 156, 176, 196, 221, 222, 239, 244, 249, 254, 259, 264, 271, 273], "dict": [1, 7, 11, 12, 13, 14, 16, 29, 31, 32, 34, 35, 36, 42, 60, 61, 62, 81, 82, 83, 101, 102, 103, 122, 123, 124, 143, 144, 145, 163, 164, 165, 183, 184, 185, 203, 204, 205, 221, 224, 230, 232, 233, 235, 236, 237, 238], "str": [2, 3, 5, 6, 7, 10, 11, 12, 13, 14, 16, 20, 29, 30, 31, 32, 34, 35, 36, 37, 41, 42, 45, 47, 49, 56, 58, 60, 61, 62, 66, 69, 70, 72, 73, 77, 79, 81, 82, 83, 87, 90, 91, 93, 97, 99, 101, 102, 103, 107, 110, 111, 113, 114, 117, 120, 122, 123, 124, 129, 132, 133, 135, 139, 143, 144, 145, 149, 152, 153, 155, 159, 161, 163, 164, 165, 169, 172, 173, 175, 179, 181, 183, 184, 185, 189, 192, 193, 195, 199, 203, 204, 205, 209, 212, 213, 215, 217, 218, 219, 220, 221, 223, 225, 226, 230, 231, 242, 243, 247, 248, 252, 253, 257, 258, 262, 263, 267, 268], "list": [3, 6, 10, 12, 30, 34, 35, 36, 41, 47, 49, 56, 60, 61, 62, 66, 70, 72, 77, 81, 82, 83, 87, 91, 93, 97, 101, 102, 103, 107, 111, 113, 117, 122, 123, 124, 129, 133, 135, 139, 143, 144, 145, 149, 153, 155, 159, 163, 164, 165, 169, 173, 175, 179, 183, 184, 185, 189, 193, 195, 199, 203, 204, 205, 209, 213, 215, 225, 226, 227, 228, 230, 271], "int": [4, 8, 9, 10, 19, 21, 22, 23, 24, 25, 26, 27, 28, 40, 41, 44, 45, 46, 47, 48, 49, 50, 53, 54, 55, 56, 58, 65, 66, 68, 69, 70, 71, 72, 74, 75, 76, 77, 79, 86, 87, 89, 90, 91, 92, 93, 95, 96, 97, 99, 106, 107, 109, 110, 111, 112, 113, 115, 116, 117, 120, 127, 128, 129, 131, 132, 133, 134, 135, 137, 138, 139, 148, 149, 151, 152, 153, 154, 155, 157, 158, 159, 161, 168, 169, 171, 172, 173, 174, 175, 177, 178, 179, 181, 188, 189, 191, 192, 193, 194, 195, 197, 198, 199, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 230, 231, 234], "option": [6, 10, 41, 47, 49, 56, 66, 70, 72, 77, 87, 91, 93, 97, 107, 111, 113, 117, 129, 133, 135, 139, 149, 153, 155, 159, 169, 173, 175, 179, 189, 193, 195, 199, 209, 213, 215, 220, 226, 227, 228, 230, 231, 271], "union": [6, 217, 219], "tupl": [6, 10, 54, 56, 75, 77, 97, 117, 139, 159, 179, 199, 230, 231], "ndarrai": [7, 11, 13, 14, 29, 32, 38, 39, 42, 63, 64, 84, 85, 104, 105, 125, 126, 146, 147, 166, 167, 186, 187, 206, 207], "img_kei": [8, 53, 54, 74, 75, 95, 115, 128, 137, 157, 177, 197], "node_idx": [8, 53, 54, 74, 75, 95, 115, 128, 137, 157, 177, 197], "batch_siz": [8, 9, 40, 47, 53, 54, 55, 65, 70, 74, 75, 76, 86, 91, 95, 96, 106, 111, 115, 116, 127, 128, 133, 137, 138, 148, 153, 157, 158, 168, 173, 177, 178, 188, 193, 197, 198, 208, 213], "1": [8, 9, 10, 40, 44, 45, 53, 54, 55, 56, 58, 65, 68, 69, 74, 75, 76, 77, 79, 86, 89, 90, 95, 96, 97, 99, 106, 109, 110, 115, 116, 117, 120, 127, 128, 131, 132, 137, 138, 139, 148, 151, 152, 157, 158, 159, 168, 171, 172, 177, 178, 179, 188, 191, 192, 197, 198, 199, 208, 211, 212, 216, 217, 218, 219, 270, 271], "ani": [8, 53, 74, 95, 115, 128, 137, 157, 177, 197, 270, 271], "given": [8, 43, 53, 67, 74, 88, 95, 108, 115, 128, 130, 137, 150, 157, 170, 177, 190, 197, 210, 230, 231], "set": [8, 44, 45, 53, 68, 69, 74, 89, 90, 95, 109, 110, 115, 128, 131, 132, 137, 151, 152, 157, 171, 172, 177, 191, 192, 197, 211, 212, 234, 270, 273], "paramet": [8, 9, 10, 17, 40, 41, 43, 44, 45, 47, 48, 49, 52, 53, 54, 55, 56, 58, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 120, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 141, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 201, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 226, 227, 228, 229, 230, 231, 234, 242, 243, 247, 248, 252, 253, 257, 258, 262, 263, 267, 268], "imag": [8, 10, 15, 43, 53, 54, 56, 57, 67, 74, 75, 77, 78, 88, 95, 97, 98, 108, 115, 117, 119, 128, 130, 137, 139, 140, 150, 157, 159, 160, 170, 177, 179, 180, 190, 197, 199, 200, 210, 271], "kei": [8, 15, 43, 53, 54, 57, 67, 74, 75, 78, 88, 95, 98, 108, 115, 119, 128, 130, 137, 140, 150, 157, 160, 170, 177, 180, 190, 197, 200, 210, 225, 234], "node": [8, 9, 10, 33, 43, 44, 45, 53, 54, 55, 56, 58, 59, 67, 68, 69, 74, 75, 76, 77, 79, 80, 88, 89, 90, 95, 96, 97, 99, 100, 108, 109, 110, 115, 116, 117, 120, 121, 128, 130, 131, 132, 137, 138, 139, 142, 150, 151, 152, 157, 158, 159, 161, 162, 170, 171, 172, 177, 178, 179, 181, 182, 190, 191, 192, 197, 198, 199, 202, 210, 211, 212], "indic": [8, 33, 43, 53, 59, 67, 74, 80, 88, 95, 100, 108, 115, 121, 128, 130, 137, 142, 150, 157, 162, 170, 177, 182, 190, 197, 202, 210], "number": [8, 9, 10, 40, 41, 47, 48, 49, 53, 55, 56, 58, 65, 66, 70, 71, 72, 74, 76, 77, 79, 86, 87, 91, 92, 93, 95, 96, 97, 99, 106, 107, 111, 112, 113, 115, 116, 117, 120, 127, 128, 129, 133, 134, 135, 137, 138, 139, 148, 149, 153, 154, 155, 157, 158, 159, 161, 168, 169, 173, 174, 175, 177, 178, 179, 181, 188, 189, 193, 194, 195, 197, 198, 199, 208, 209, 213, 214, 215, 231], "sampl": [8, 9, 40, 47, 53, 55, 65, 70, 74, 76, 86, 91, 95, 96, 106, 111, 115, 116, 127, 128, 133, 137, 138, 148, 153, 157, 158, 168, 173, 177, 178, 188, 193, 197, 198, 208, 213, 228], "If": [8, 9, 10, 40, 41, 44, 45, 47, 48, 49, 53, 55, 56, 65, 66, 68, 69, 70, 71, 72, 74, 76, 77, 86, 87, 89, 90, 91, 92, 93, 95, 96, 97, 106, 107, 109, 110, 111, 112, 113, 115, 116, 117, 127, 128, 129, 131, 132, 133, 134, 135, 137, 138, 139, 148, 149, 151, 152, 153, 154, 155, 157, 158, 159, 168, 169, 171, 172, 173, 174, 175, 177, 178, 179, 188, 189, 191, 192, 193, 194, 195, 197, 198, 199, 208, 209, 211, 212, 213, 214, 215, 221, 226, 227, 228, 271, 274, 277], "unspecifi": [8, 9, 40, 41, 47, 48, 49, 53, 55, 65, 66, 70, 71, 72, 74, 76, 86, 87, 91, 92, 93, 95, 96, 106, 107, 111, 112, 113, 115, 116, 127, 128, 129, 133, 134, 135, 137, 138, 148, 149, 153, 154, 155, 157, 158, 168, 169, 173, 174, 175, 177, 178, 188, 189, 193, 194, 195, 197, 198, 208, 209, 213, 214, 215], "default": [8, 9, 40, 41, 47, 48, 49, 53, 55, 65, 66, 70, 71, 72, 74, 76, 86, 87, 91, 92, 93, 95, 96, 106, 107, 111, 112, 113, 115, 116, 127, 128, 129, 133, 134, 135, 137, 138, 148, 149, 153, 154, 155, 157, 158, 168, 169, 173, 174, 175, 177, 178, 188, 189, 193, 194, 195, 197, 198, 208, 209, 213, 214, 215], "return": [8, 9, 15, 33, 38, 39, 40, 53, 54, 55, 57, 59, 63, 64, 65, 74, 75, 76, 78, 80, 84, 85, 86, 95, 96, 98, 100, 104, 105, 106, 115, 116, 119, 121, 125, 126, 127, 128, 137, 138, 140, 142, 146, 147, 148, 157, 158, 160, 162, 166, 167, 168, 177, 178, 180, 182, 186, 187, 188, 197, 198, 200, 202, 206, 207, 208, 225, 226, 230, 231, 234], "type": [8, 9, 10, 15, 33, 38, 39, 40, 45, 53, 54, 55, 56, 57, 59, 63, 64, 65, 69, 74, 75, 76, 77, 78, 80, 84, 85, 86, 90, 95, 96, 97, 98, 100, 104, 105, 106, 110, 115, 116, 117, 119, 121, 125, 126, 127, 128, 132, 137, 138, 139, 140, 142, 146, 147, 148, 152, 157, 158, 159, 160, 161, 162, 166, 167, 168, 172, 177, 178, 179, 180, 181, 182, 186, 187, 188, 192, 197, 198, 199, 200, 202, 206, 207, 208, 212, 225, 226, 230, 231, 234, 271], "eval_dict": [8, 53, 74, 95, 115, 128, 137, 157, 177, 197], "each": [9, 55, 76, 96, 116, 138, 158, 178, 198, 271], "seper": [9, 55, 76, 96, 116, 138, 158, 178, 198, 228], "split_per_node_typ": [9, 55, 76, 96, 116, 138, 158, 178, 198], "evaluation_per_node_typ": [9, 55, 76, 96, 116, 138, 158, 178, 198], "data_origin": [10, 56, 77, 97, 117, 139, 159, 179, 199], "data_path": [10, 56, 77, 97, 117, 139, 159, 179, 199], "radiu": [10, 56, 77, 97, 117, 139, 159, 179, 199], "n_ring": [10, 56, 77, 97, 117, 139, 159, 179, 199], "graph_covar_select": [10, 56, 77, 97, 117, 139, 159, 179, 199], "none": [10, 41, 47, 49, 56, 66, 70, 72, 77, 87, 91, 93, 97, 107, 111, 113, 117, 129, 133, 135, 139, 149, 153, 155, 159, 169, 173, 175, 179, 189, 193, 195, 199, 209, 213, 215, 226, 227, 228, 230, 231, 269], "node_label_space_id": [10, 56, 77, 97, 117, 139, 159, 179, 199], "node_feature_space_id": [10, 56, 77, 97, 117, 139, 159, 179, 199], "standard": [10, 56, 77, 97, 117, 139, 159, 179, 199, 273], "use_covar_node_posit": [10, 56, 77, 97, 117, 139, 159, 179, 199], "fals": [10, 47, 52, 56, 58, 70, 73, 77, 79, 91, 94, 97, 99, 111, 114, 117, 120, 133, 139, 153, 156, 159, 161, 173, 176, 179, 181, 193, 199, 213, 216, 217, 218, 219, 220, 221, 228, 229, 230, 231], "use_covar_node_label": [10, 56, 77, 97, 117, 139, 159, 179, 199], "use_covar_graph_covar": [10, 56, 77, 97, 117, 139, 159, 179, 199], "domain_typ": [10, 56, 77, 97, 117, 139, 159, 179, 199], "robust": [10, 56, 77, 97, 117, 139, 159, 179, 199], "robustness_se": [10, 56, 77, 97, 117, 139, 159, 179, 199], "n_top_gen": [10, 56, 77, 97, 117, 139, 159, 179, 199], "segmentation_robust": [10, 56, 77, 97, 117, 139, 159, 179, 199], "resimulate_nod": [10, 56, 77, 97, 117, 139, 159, 179, 199], "resimulate_nodes_w_depd": [10, 56, 77, 97, 117, 139, 159, 179, 199], "resimulate_nodes_sparsity_r": [10, 56, 77, 97, 117, 139, 159, 179, 199], "0": [10, 41, 47, 49, 56, 58, 66, 70, 72, 77, 79, 87, 91, 93, 97, 99, 107, 111, 113, 117, 120, 129, 133, 135, 139, 149, 153, 155, 159, 161, 169, 173, 175, 179, 181, 189, 193, 195, 199, 209, 213, 215, 216, 217, 218, 219, 220, 221, 230, 231], "5": [10, 41, 47, 48, 49, 56, 66, 70, 71, 72, 77, 87, 91, 92, 93, 97, 107, 111, 112, 113, 117, 129, 133, 134, 135, 139, 149, 153, 154, 155, 159, 169, 173, 174, 175, 179, 189, 193, 194, 195, 199, 209, 213, 214, 215, 230], "get": [10, 56, 77, 97, 117, 139, 159, 179, 199, 226, 227], "us": [10, 41, 47, 49, 56, 58, 66, 70, 72, 77, 79, 87, 91, 93, 97, 99, 107, 111, 113, 117, 120, 129, 133, 135, 139, 149, 153, 155, 159, 161, 169, 173, 175, 179, 181, 189, 193, 195, 199, 209, 213, 215, 225, 270, 271, 272, 275, 278], "origin": [10, 56, 77, 97, 117, 139, 159, 179, 199], "path": [10, 56, 77, 97, 117, 139, 159, 179, 199, 230, 231], "ring": [10, 56, 77, 97, 117, 139, 159, 179, 199], "neighbor": [10, 56, 77, 97, 117, 139, 159, 179, 199], "grid": [10, 56, 77, 97, 117, 139, 159, 179, 199, 223, 228, 229], "select": [10, 44, 45, 56, 68, 69, 77, 89, 90, 97, 109, 110, 117, 131, 132, 139, 151, 152, 159, 171, 172, 179, 191, 192, 199, 211, 212, 223, 226, 230, 231, 234], "graph": [10, 56, 58, 77, 79, 97, 99, 117, 120, 139, 159, 161, 179, 181, 199, 217, 219, 230, 271, 275], "covari": [10, 56, 77, 97, 117, 139, 159, 179, 199], "label": [10, 40, 56, 65, 77, 86, 97, 106, 117, 127, 139, 148, 159, 168, 179, 188, 199, 208], "space": [10, 54, 56, 75, 77, 97, 117, 139, 159, 179, 199, 270], "id": [10, 56, 77, 97, 117, 139, 159, 179, 199], "featur": [10, 56, 77, 97, 117, 139, 159, 179, 199, 273], "bool": [10, 18, 41, 47, 49, 51, 52, 56, 58, 66, 70, 72, 73, 77, 79, 87, 91, 93, 94, 97, 99, 107, 111, 113, 114, 117, 120, 129, 133, 135, 139, 149, 153, 155, 156, 159, 161, 169, 173, 175, 176, 179, 181, 189, 193, 195, 199, 209, 213, 215, 216, 217, 218, 219, 220, 221, 228, 229, 230, 231, 242, 247, 252, 257, 262, 267], "whether": [10, 41, 47, 49, 56, 58, 66, 70, 72, 77, 79, 87, 91, 93, 97, 99, 107, 111, 113, 117, 120, 129, 133, 135, 139, 149, 153, 155, 159, 161, 169, 173, 175, 179, 181, 189, 193, 195, 199, 209, 213, 215, 228, 229, 230, 231], "posit": [10, 56, 77, 97, 117, 139, 159, 179, 199, 270], "i": [10, 56, 77, 97, 117, 139, 159, 179, 199, 221, 226, 227, 230, 231, 270, 271, 274, 275], "domain": [10, 56, 58, 77, 79, 97, 99, 117, 120, 139, 159, 161, 179, 181, 199], "float": [10, 41, 44, 45, 47, 49, 56, 58, 66, 68, 69, 70, 72, 77, 79, 87, 89, 90, 91, 93, 97, 99, 107, 109, 110, 111, 113, 117, 120, 129, 131, 132, 133, 135, 139, 149, 151, 152, 153, 155, 159, 161, 169, 171, 172, 173, 175, 179, 181, 189, 191, 192, 193, 195, 199, 209, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221], "fraction": [10, 44, 45, 56, 68, 69, 77, 89, 90, 97, 109, 110, 117, 131, 132, 139, 151, 152, 159, 171, 172, 179, 191, 192, 199, 211, 212], "test": [10, 43, 44, 45, 56, 67, 68, 69, 77, 88, 89, 90, 97, 108, 109, 110, 117, 130, 131, 132, 139, 150, 151, 152, 159, 170, 171, 172, 179, 190, 191, 192, 199, 210, 211, 212, 226, 230, 273], "seed": [10, 44, 45, 47, 56, 68, 69, 70, 77, 89, 90, 91, 97, 109, 110, 111, 117, 131, 132, 133, 139, 151, 152, 153, 159, 171, 172, 173, 179, 191, 192, 193, 199, 211, 212, 213], "analysi": [10, 56, 77, 97, 117, 139, 159, 179, 199, 271, 272], "n": [10, 56, 77, 97, 117, 139, 159, 179, 199], "top": [10, 56, 77, 97, 117, 139, 159, 179, 199, 271], "gene": [10, 56, 77, 97, 117, 139, 159, 179, 199], "highli": [10, 56, 77, 97, 117, 139, 159, 179, 199, 271], "variabl": [10, 56, 77, 97, 117, 139, 159, 179, 199], "segment": [10, 56, 77, 97, 117, 139, 159, 179, 199], "fit": [10, 56, 77, 97, 117, 139, 159, 179, 199, 277, 278], "signal": [10, 56, 77, 97, 117, 139, 159, 179, 199], "overflow": [10, 56, 77, 97, 117, 139, 159, 179, 199], "rais": [10, 44, 45, 56, 68, 69, 77, 89, 90, 97, 109, 110, 117, 131, 132, 139, 151, 152, 159, 171, 172, 179, 191, 192, 199, 211, 212, 221, 226, 227, 228, 234], "valueerror": [10, 44, 45, 56, 68, 69, 77, 89, 90, 97, 109, 110, 117, 131, 132, 139, 151, 152, 159, 171, 172, 179, 191, 192, 199, 211, 212, 221, 226, 227, 228, 234], "sub": [10, 56, 77, 97, 117, 139, 159, 179, 199], "covar_select": [10, 56, 77, 97, 117, 139, 159, 179, 199], "could": [10, 56, 77, 97, 117, 139, 159, 179, 199, 270], "found": [10, 56, 77, 97, 117, 139, 159, 179, 199, 228], "recogn": [10, 56, 77, 97, 117, 139, 159, 179, 199, 221, 226], "properti": [15, 33, 38, 39, 57, 59, 63, 64, 78, 80, 84, 85, 98, 100, 104, 105, 119, 121, 125, 126, 140, 142, 146, 147, 160, 162, 166, 167, 180, 182, 186, 187, 200, 202, 206, 207, 225], "abstract": 17, "kwarg": [17, 41, 47, 49, 58, 66, 70, 72, 79, 87, 91, 93, 99, 107, 111, 113, 120, 129, 133, 135, 141, 149, 153, 155, 161, 169, 173, 175, 181, 189, 193, 195, 201, 209, 213, 215, 216, 217, 218, 219, 220, 221, 241, 246, 251, 256, 261, 266], "compil": 17, "arbitrari": [17, 41, 47, 49, 58, 66, 70, 72, 79, 87, 91, 93, 99, 107, 111, 113, 120, 129, 133, 135, 141, 149, 153, 155, 161, 169, 173, 175, 181, 189, 193, 195, 201, 209, 213, 215], "keyword": [17, 41, 47, 49, 58, 66, 70, 72, 79, 87, 91, 93, 99, 107, 111, 113, 120, 129, 133, 135, 141, 149, 153, 155, 161, 169, 173, 175, 181, 189, 193, 195, 201, 209, 213, 215], "argument": [17, 41, 47, 49, 58, 66, 70, 72, 79, 87, 91, 93, 99, 107, 111, 113, 120, 129, 133, 135, 141, 149, 153, 155, 161, 169, 173, 175, 181, 189, 193, 195, 201, 209, 213, 215], "alia": [34, 35, 36, 60, 61, 62, 81, 82, 83, 101, 102, 103, 122, 123, 124, 143, 144, 145, 163, 164, 165, 183, 184, 185, 203, 204, 205], "autoattribut": [34, 35, 36, 60, 61, 62, 81, 82, 83, 101, 102, 103, 122, 123, 124, 143, 144, 145, 163, 164, 165, 183, 184, 185, 203, 204, 205], "patient": [38, 39, 63, 64, 84, 85, 104, 105, 125, 126, 146, 147, 166, 167, 186, 187, 206, 207], "identifi": [38, 39, 63, 64, 84, 85, 104, 105, 125, 126, 146, 147, 166, 167, 186, 187, 206, 207, 223, 226, 227], "target": [38, 45, 63, 69, 84, 90, 104, 110, 125, 132, 146, 152, 166, 172, 186, 192, 206, 212, 229, 231], "uniqu": [39, 64, 85, 105, 126, 147, 167, 187, 207], "observ": [40, 44, 45, 65, 68, 69, 86, 89, 90, 106, 109, 110, 127, 131, 132, 148, 151, 152, 168, 171, 172, 188, 191, 192, 208, 211, 212], "full": [40, 65, 86, 106, 127, 148, 168, 188, 208, 271], "includ": [40, 65, 86, 106, 127, 148, 168, 188, 208, 270, 271], "scale": [40, 58, 65, 79, 86, 99, 106, 120, 127, 148, 161, 168, 181, 188, 208], "group": [40, 65, 86, 106, 127, 148, 168, 188, 208], "exactli": [40, 65, 86, 106, 127, 148, 168, 188, 208], "nodes_idx_test": [40, 43, 65, 67, 86, 88, 106, 108, 127, 130, 148, 150, 168, 170, 188, 190, 208, 210], "decoder_epoch": [41, 47, 66, 70, 87, 91, 107, 111, 129, 133, 149, 153, 169, 173, 189, 193, 209, 213], "1000": [41, 47, 49, 66, 70, 72, 87, 91, 93, 107, 111, 113, 129, 133, 135, 149, 153, 155, 169, 173, 175, 189, 193, 195, 209, 213, 215], "patienc": [41, 47, 49, 66, 70, 72, 87, 91, 93, 107, 111, 113, 129, 133, 135, 149, 153, 155, 169, 173, 175, 189, 193, 195, 209, 213, 215], "20": [41, 47, 49, 66, 70, 72, 87, 91, 93, 107, 111, 113, 129, 133, 135, 149, 153, 155, 169, 173, 175, 189, 193, 195, 209, 213, 215], "lr_schedule_min_lr": [41, 47, 49, 66, 70, 72, 87, 91, 93, 107, 111, 113, 129, 133, 135, 149, 153, 155, 169, 173, 175, 189, 193, 195, 209, 213, 215], "1e": [41, 47, 49, 66, 70, 72, 87, 91, 93, 107, 111, 113, 129, 133, 135, 149, 153, 155, 169, 173, 175, 189, 193, 195, 209, 213, 215], "05": [41, 47, 49, 66, 70, 72, 87, 91, 93, 107, 111, 113, 129, 133, 135, 149, 153, 155, 169, 173, 175, 189, 193, 195, 209, 213, 215], "lr_schedule_factor": [41, 47, 49, 66, 70, 72, 87, 91, 93, 107, 111, 113, 129, 133, 135, 149, 153, 155, 169, 173, 175, 189, 193, 195, 209, 213, 215], "2": [41, 47, 49, 66, 70, 72, 87, 91, 93, 99, 107, 111, 113, 120, 129, 133, 135, 149, 153, 155, 169, 173, 175, 189, 193, 195, 209, 213, 215, 218, 219], "lr_schedule_pati": [41, 47, 49, 66, 70, 72, 87, 91, 93, 107, 111, 113, 129, 133, 135, 149, 153, 155, 169, 173, 175, 189, 193, 195, 209, 213, 215], "initial_epoch": [41, 47, 49, 66, 70, 72, 87, 91, 93, 107, 111, 113, 129, 133, 135, 149, 153, 155, 169, 173, 175, 189, 193, 195, 209, 213, 215], "monitor_partit": [41, 47, 49, 66, 70, 72, 87, 91, 93, 107, 111, 113, 129, 133, 135, 149, 153, 155, 169, 173, 175, 189, 193, 195, 209, 213, 215], "val": [41, 47, 49, 66, 70, 72, 87, 91, 93, 107, 111, 113, 129, 133, 135, 149, 153, 155, 169, 173, 175, 189, 193, 195, 209, 213, 215, 223, 230], "monitor_metr": [41, 47, 49, 66, 70, 72, 87, 91, 93, 107, 111, 113, 129, 133, 135, 149, 153, 155, 169, 173, 175, 189, 193, 195, 209, 213, 215], "loss": [41, 47, 49, 66, 70, 72, 87, 91, 93, 107, 111, 113, 129, 133, 135, 149, 153, 155, 169, 173, 175, 189, 193, 195, 209, 213, 215, 223, 226], "log_dir": [41, 47, 49, 66, 70, 72, 87, 91, 93, 107, 111, 113, 129, 133, 135, 149, 153, 155, 169, 173, 175, 189, 193, 195, 209, 213, 215], "callback": [41, 47, 49, 66, 70, 72, 87, 91, 93, 107, 111, 113, 129, 133, 135, 149, 153, 155, 169, 173, 175, 189, 193, 195, 209, 213, 215], "early_stop": [41, 47, 49, 66, 70, 72, 87, 91, 93, 107, 111, 113, 129, 133, 135, 149, 153, 155, 169, 173, 175, 189, 193, 195, 209, 213, 215], "true": [41, 47, 49, 52, 58, 66, 70, 72, 73, 79, 87, 91, 93, 94, 99, 107, 111, 113, 114, 120, 129, 133, 135, 149, 153, 155, 161, 169, 173, 175, 181, 189, 193, 195, 209, 213, 215, 216, 217, 218, 219, 230, 231, 242, 247, 252, 257, 262, 267], "reduce_lr_plateau": [41, 47, 49, 66, 70, 72, 87, 91, 93, 107, 111, 113, 129, 133, 135, 149, 153, 155, 169, 173, 175, 189, 193, 195, 209, 213, 215], "pre": [41, 58, 66, 79, 87, 99, 107, 120, 129, 149, 169, 189, 209, 271], "decod": [41, 47, 54, 58, 66, 70, 75, 79, 87, 91, 94, 99, 107, 111, 114, 120, 129, 133, 149, 153, 169, 173, 189, 193, 209, 213, 218, 219], "valid": [41, 44, 45, 47, 49, 66, 68, 69, 70, 72, 87, 89, 90, 91, 93, 107, 109, 110, 111, 113, 129, 131, 132, 133, 135, 149, 151, 152, 153, 155, 169, 171, 172, 173, 175, 189, 191, 192, 193, 195, 209, 211, 212, 213, 215, 223, 225, 226, 230, 234, 271], "maximum": [41, 47, 49, 66, 70, 72, 87, 91, 93, 107, 111, 113, 129, 133, 135, 149, 153, 155, 169, 173, 175, 189, 193, 195, 209, 213, 215], "epoch": [41, 47, 48, 49, 58, 66, 70, 71, 72, 79, 87, 91, 92, 93, 99, 107, 111, 112, 113, 120, 129, 133, 134, 135, 149, 153, 154, 155, 169, 173, 174, 175, 189, 193, 194, 195, 209, 213, 214, 215], "termin": [41, 47, 49, 66, 70, 72, 87, 91, 93, 107, 111, 113, 129, 133, 135, 149, 153, 155, 169, 173, 175, 189, 193, 195, 209, 213, 215, 274], "criteria": [41, 47, 49, 66, 70, 72, 87, 91, 93, 107, 111, 113, 129, 133, 135, 149, 153, 155, 169, 173, 175, 189, 193, 195, 209, 213, 215], "improv": [41, 47, 48, 49, 66, 70, 71, 72, 87, 91, 92, 93, 107, 111, 112, 113, 129, 133, 134, 135, 149, 153, 154, 155, 169, 173, 174, 175, 189, 193, 194, 195, 209, 213, 214, 215, 271], "lower": [41, 47, 49, 66, 70, 72, 87, 91, 93, 107, 111, 113, 129, 133, 135, 149, 153, 155, 169, 173, 175, 189, 193, 195, 209, 213, 215], "bound": [41, 47, 49, 66, 70, 72, 87, 91, 93, 107, 111, 113, 129, 133, 135, 149, 153, 155, 169, 173, 175, 189, 193, 195, 209, 213, 215], "learn": [41, 47, 49, 58, 66, 70, 72, 79, 87, 91, 93, 99, 107, 111, 113, 120, 129, 133, 135, 149, 153, 155, 161, 169, 173, 175, 181, 189, 193, 195, 209, 213, 215, 275], "rate": [41, 47, 49, 58, 66, 70, 72, 79, 87, 91, 93, 99, 107, 111, 113, 120, 129, 133, 135, 149, 153, 155, 161, 169, 173, 175, 181, 189, 193, 195, 209, 213, 215], "factor": [41, 47, 49, 66, 70, 72, 87, 91, 93, 107, 111, 113, 129, 133, 135, 149, 153, 155, 169, 173, 175, 189, 193, 195, 209, 213, 215], "which": [41, 47, 49, 66, 70, 72, 87, 91, 93, 107, 111, 113, 129, 133, 135, 149, 153, 155, 169, 173, 175, 189, 193, 195, 209, 213, 215, 270, 271], "reduc": [41, 47, 49, 66, 70, 72, 87, 91, 93, 107, 111, 113, 129, 133, 135, 149, 153, 155, 169, 173, 175, 189, 193, 195, 209, 213, 215], "new_lr": [41, 47, 49, 66, 70, 72, 87, 91, 93, 107, 111, 113, 129, 133, 135, 149, 153, 155, 169, 173, 175, 189, 193, 195, 209, 213, 215], "lr": [41, 47, 49, 66, 70, 72, 87, 91, 93, 107, 111, 113, 129, 133, 135, 149, 153, 155, 169, 173, 175, 189, 193, 195, 209, 213, 215], "after": [41, 47, 49, 66, 70, 72, 87, 91, 93, 107, 111, 113, 129, 133, 135, 149, 153, 155, 169, 173, 175, 189, 193, 195, 209, 213, 215], "start": [41, 47, 49, 66, 70, 72, 87, 91, 93, 107, 111, 113, 129, 133, 135, 149, 153, 155, 169, 173, 175, 189, 193, 195, 209, 213, 215, 271], "resum": [41, 47, 49, 66, 70, 72, 87, 91, 93, 107, 111, 113, 129, 133, 135, 149, 153, 155, 169, 173, 175, 189, 193, 195, 209, 213, 215], "previou": [41, 47, 49, 66, 70, 72, 87, 91, 93, 107, 111, 113, 129, 133, 135, 149, 153, 155, 169, 173, 175, 189, 193, 195, 209, 213, 215], "run": [41, 47, 49, 66, 70, 72, 87, 91, 93, 107, 111, 113, 129, 133, 135, 149, 153, 155, 169, 173, 175, 189, 193, 195, 209, 213, 215, 228, 271, 274], "monitor": [41, 47, 49, 66, 70, 72, 87, 91, 93, 107, 111, 113, 129, 133, 135, 149, 153, 155, 169, 173, 175, 189, 193, 195, 209, 213, 215], "partit": [41, 43, 44, 45, 47, 49, 54, 66, 67, 68, 69, 70, 72, 75, 87, 88, 89, 90, 91, 93, 107, 108, 109, 110, 111, 113, 129, 130, 131, 132, 133, 135, 149, 150, 151, 152, 153, 155, 169, 170, 171, 172, 173, 175, 189, 190, 191, 192, 193, 195, 209, 210, 211, 212, 213, 215, 223, 226, 230], "metric": [41, 47, 49, 54, 66, 70, 72, 75, 87, 91, 93, 107, 111, 113, 129, 133, 135, 149, 153, 155, 169, 173, 175, 189, 193, 195, 209, 213, 215, 223, 226, 228, 229, 230, 231, 278], "log": [41, 47, 49, 66, 70, 72, 87, 91, 93, 107, 111, 113, 129, 133, 135, 149, 153, 155, 169, 173, 175, 189, 193, 195, 209, 213, 215], "directori": [41, 47, 49, 66, 70, 72, 87, 91, 93, 107, 111, 113, 129, 133, 135, 149, 153, 155, 169, 173, 175, 189, 193, 195, 209, 213, 215, 271], "call": [41, 47, 49, 66, 70, 72, 87, 91, 93, 107, 111, 113, 129, 133, 135, 149, 153, 155, 169, 173, 175, 189, 193, 195, 209, 213, 215, 271], "dure": [41, 47, 49, 66, 70, 72, 87, 91, 93, 107, 111, 113, 129, 133, 135, 149, 153, 155, 169, 173, 175, 189, 193, 195, 209, 213, 215], "activ": [41, 47, 49, 66, 70, 72, 79, 87, 91, 93, 107, 111, 113, 120, 129, 133, 135, 149, 153, 155, 169, 173, 175, 189, 193, 195, 209, 213, 215], "earli": [41, 47, 49, 66, 70, 72, 87, 91, 93, 107, 111, 113, 129, 133, 135, 149, 153, 155, 169, 173, 175, 189, 193, 195, 209, 213, 215], "stop": [41, 47, 49, 66, 70, 72, 87, 91, 93, 107, 111, 113, 129, 133, 135, 149, 153, 155, 169, 173, 175, 189, 193, 195, 209, 213, 215], "plateau": [41, 47, 49, 66, 70, 72, 87, 91, 93, 107, 111, 113, 129, 133, 135, 149, 153, 155, 169, 173, 175, 189, 193, 195, 209, 213, 215], "integ": [41, 47, 48, 49, 66, 70, 71, 72, 87, 91, 92, 93, 107, 111, 112, 113, 129, 133, 134, 135, 149, 153, 154, 155, 169, 173, 174, 175, 189, 193, 194, 195, 209, 213, 214, 215], "time": [41, 47, 48, 49, 66, 70, 71, 72, 87, 91, 92, 93, 107, 111, 112, 113, 129, 133, 134, 135, 149, 153, 154, 155, 169, 173, 174, 175, 189, 193, 194, 195, 209, 213, 214, 215], "iter": [41, 47, 48, 49, 66, 70, 71, 72, 87, 91, 92, 93, 107, 111, 112, 113, 129, 133, 134, 135, 149, 153, 154, 155, 169, 173, 174, 175, 189, 193, 194, 195, 209, 213, 214, 215], "over": [41, 47, 48, 49, 66, 70, 71, 72, 87, 91, 92, 93, 107, 111, 112, 113, 129, 133, 134, 135, 149, 153, 154, 155, 169, 173, 174, 175, 189, 193, 194, 195, 209, 213, 214, 215, 271], "arrai": [41, 47, 48, 49, 54, 66, 70, 71, 72, 75, 87, 91, 92, 93, 107, 111, 112, 113, 129, 133, 134, 135, 149, 153, 154, 155, 169, 173, 174, 175, 189, 193, 194, 195, 209, 213, 214, 215], "pretrain": [41, 47, 66, 70, 87, 91, 107, 111, 129, 133, 149, 153, 169, 173, 189, 193, 209, 213], "img_keys_test": [43, 67, 88, 108, 130, 150, 170, 190, 210], "img_keys_train": [43, 67, 88, 108, 130, 150, 170, 190, 210], "img_keys_ev": [43, 67, 88, 108, 130, 150, 170, 190, 210], "nodes_idx_train": [43, 67, 88, 108, 130, 150, 170, 190, 210], "nodes_idx_ev": [43, 67, 88, 108, 130, 150, 170, 190, 210], "split": [43, 44, 45, 67, 68, 69, 88, 89, 90, 108, 109, 110, 130, 131, 132, 150, 151, 152, 170, 171, 172, 190, 191, 192, 210, 211, 212, 271], "test_split": [44, 45, 68, 69, 89, 90, 109, 110, 131, 132, 151, 152, 171, 172, 191, 192, 211, 212], "validation_split": [44, 45, 68, 69, 89, 90, 109, 110, 131, 132, 151, 152, 171, 172, 191, 192, 211, 212], "randomli": [44, 45, 68, 69, 89, 90, 109, 110, 131, 132, 151, 152, 171, 172, 191, 192, 211, 212], "total": [44, 45, 68, 69, 89, 90, 109, 110, 131, 132, 151, 152, 171, 172, 191, 192, 211, 212], "eval": [44, 45, 68, 69, 89, 90, 109, 110, 131, 132, 151, 152, 171, 172, 191, 192, 211, 212], "random": [44, 45, 47, 68, 69, 70, 89, 90, 91, 109, 110, 111, 131, 132, 133, 151, 152, 153, 171, 172, 173, 191, 192, 193, 211, 212, 213], "dataset": [44, 45, 54, 68, 69, 75, 89, 90, 109, 110, 131, 132, 151, 152, 171, 172, 191, 192, 211, 212, 271, 277], "ar": [44, 45, 68, 69, 89, 90, 109, 110, 131, 132, 151, 152, 171, 172, 191, 192, 211, 212, 228, 229, 270, 271], "empti": [44, 45, 68, 69, 89, 90, 109, 110, 131, 132, 151, 152, 171, 172, 191, 192, 211, 212], "target_cel": [45, 69, 90, 110, 132, 152, 172, 192, 212], "cell": [45, 69, 90, 110, 132, 152, 172, 192, 212, 229, 231, 271, 272, 275], "epochs_warmup": [47, 70, 91, 111, 133, 153, 173, 193, 213], "max_steps_per_epoch": [47, 70, 91, 111, 133, 153, 173, 193, 213], "16": [47, 70, 91, 111, 133, 153, 173, 193, 213], "validation_batch_s": [47, 70, 91, 111, 133, 153, 173, 193, 213], "max_validation_step": [47, 70, 91, 111, 133, 153, 173, 193, 213], "10": [47, 48, 58, 70, 71, 91, 92, 99, 111, 112, 120, 133, 134, 153, 154, 173, 174, 193, 194, 213, 214, 216, 217, 218, 219, 230], "shuffle_buffer_s": [47, 70, 91, 111, 133, 153, 173, 193, 213], "10000": [47, 70, 91, 111, 133, 153, 173, 193, 213], "pretrain_decod": [47, 70, 91, 111, 133, 153, 173, 193, 213], "decoder_pati": [47, 70, 91, 111, 133, 153, 173, 193, 213], "decoder_callback": [47, 70, 91, 111, 133, 153, 173, 193, 213], "aggress": [47, 48, 70, 71, 91, 92, 111, 112, 133, 134, 153, 154, 173, 174, 193, 194, 213, 214], "aggressive_enc_pati": [47, 48, 70, 71, 91, 92, 111, 112, 133, 134, 153, 154, 173, 174, 193, 194, 213, 214], "aggressive_epoch": [47, 48, 70, 71, 91, 92, 111, 112, 133, 134, 153, 154, 173, 174, 193, 194, 213, 214], "1234": [47, 70, 91, 111, 133, 153, 173, 193, 213], "warm": [47, 58, 70, 79, 91, 99, 111, 120, 133, 153, 173, 193, 213], "up": [47, 58, 70, 79, 91, 99, 111, 120, 133, 153, 173, 193, 213, 273], "without": [47, 70, 91, 111, 133, 153, 173, 193, 213, 270, 271], "maxim": [47, 58, 70, 79, 91, 99, 111, 120, 133, 153, 173, 193, 213], "step": [47, 70, 91, 111, 133, 153, 173, 193, 213, 271], "per": [47, 54, 58, 70, 75, 79, 91, 99, 111, 120, 133, 153, 161, 173, 181, 193, 213, 271], "gradient": [47, 70, 91, 111, 133, 153, 173, 193, 213], "updat": [47, 70, 91, 111, 133, 153, 173, 193, 213, 271], "shuffl": [47, 70, 91, 111, 133, 153, 173, 193, 213], "buffer": [47, 70, 91, 111, 133, 153, 173, 193, 213], "size": [47, 54, 58, 70, 75, 79, 91, 99, 111, 120, 133, 153, 161, 173, 181, 193, 213, 230, 231, 270], "1e4": [47, 70, 91, 111, 133, 153, 173, 193, 213], "reprodu": [47, 70, 91, 111, 133, 153, 173, 193, 213], "normal": [49, 58, 72, 79, 93, 113, 135, 155, 175, 195, 215], "use_type_cond": [52, 73, 94, 114, 216, 217, 218, 219], "log_transform": [52, 73, 94, 114, 156, 176], "condit": [52, 73, 79, 120, 216, 217], "variat": [52, 73, 216, 217], "autoencod": [52, 73, 216, 217], "subclass": [52, 73, 94, 114, 156, 176], "estimatornograph": [52, 94], "base": [54, 75, 275], "resampl": [54, 75], "posterior": [54, 75, 228], "node_1": [54, 75], "domain_1": [54, 75], "encod": [54, 58, 75, 79, 94, 99, 114, 120, 218, 219], "z_1": [54, 75], "domain_2": [54, 75], "reconstruction_2": [54, 75], "dictionari": [54, 75, 225, 271], "batch": [54, 58, 75, 79], "latent": [54, 58, 75, 79, 99, 120], "z": [54, 75], "z_mean": [54, 75], "z_log_var": [54, 75], "optim": [58, 79, 99, 120, 161, 181], "adam": [58, 79, 99, 120, 161, 181], "learning_r": [58, 79, 99, 120, 161, 181], "0001": [58, 79, 99, 120, 161, 181], "latent_dim": [58, 79, 99, 120, 216, 217, 218, 219], "intermediate_dim_enc": [58, 79, 216, 217], "128": [58, 79, 99, 120, 216, 217, 218, 219], "intermediate_dim_dec": [58, 79, 216, 217], "depth_enc": [58, 79, 216, 217], "depth_dec": [58, 79, 216, 217], "dropout_r": [58, 79, 99, 120, 216, 217, 218, 219], "l2_coef": [58, 79, 99, 120, 161, 181, 216, 217, 218, 219, 220, 221], "l1_coef": [58, 79, 99, 120, 161, 181, 216, 217, 218, 219, 220, 221], "n_eval_nodes_per_graph": [58, 79, 99, 120, 161, 181], "use_domain": [58, 79, 99, 120, 161, 181, 216, 217, 218, 219, 220, 221], "use_batch_norm": [58, 79, 216, 217], "scale_node_s": [58, 79, 99, 120, 161, 181, 216, 217, 218, 219, 220, 221], "transform_input": [58, 79, 216, 217], "beta": [58, 79, 99, 120], "01": [58, 79, 99, 120], "max_beta": [58, 79, 99, 120], "pre_warm_up": [58, 79, 99, 120], "output_lay": [58, 79, 99, 120, 161, 181, 216, 217, 218, 219, 220, 221], "gaussian": [58, 79, 99, 120, 216, 217, 218, 219], "modelcva": 58, "object": [58, 79, 99, 120, 161, 181, 230, 231, 271], "dimens": [58, 79, 99, 120], "dropout": [58, 79, 99, 120], "l2": [58, 79, 99, 120, 161, 181], "regular": [58, 79, 99, 120, 161, 181], "coeffici": [58, 79, 99, 120, 161, 181], "l1": [58, 79, 99, 120, 161, 181], "intermedi": [58, 79, 99, 120], "depth": [58, 79, 99, 120], "inform": [58, 79, 99, 120, 161, 181, 227, 270], "output": [58, 79, 99, 120, 161, 181, 228, 229], "layer": [58, 79, 99, 120, 161, 181, 217, 219], "transform": [58, 79], "input": [58, 79], "betaschedul": [58, 79, 99, 120], "cond_typ": [73, 114, 217, 219], "gcn": [73, 114, 217, 219], "estimatorgraph": [73, 114], "8": [79, 120, 217, 219, 231], "cond_depth": [79, 120, 217, 219], "cond_dim": [79, 120, 217, 219], "cond_dropout_r": [79, 120, 217, 219], "cond_activ": [79, 120, 217, 219], "relu": [79, 120, 217, 219], "cond_l2_reg": [79, 120, 217, 219], "cond_use_bia": [79, 120, 217, 219], "32": [79, 99, 120, 161, 181], "modelcvaencem": 79, "bia": [79, 120], "enc_intermediate_dim": [99, 120, 218, 219], "enc_depth": [99, 120, 218, 219], "dec_intermediate_dim": [99, 120, 218, 219], "dec_depth": [99, 120, 218, 219], "modeledncem": 120, "embed": 128, "spatial": [136, 218, 220, 221, 272, 275], "interact": [156, 220, 271, 277], "use_interact": [161, 220], "linear": [161, 176, 181, 220, 221], "modelinteract": [161, 181], "use_source_typ": [181, 221], "baselin": [196, 220, 221, 230], "input_shap": [216, 217, 218, 219, 220, 221], "ind": [217, 219], "max": [217, 219, 226], "non": 218, "arg": 221, "training_model": 221, "source_path": 222, "gs_id": [222, 223], "lateral_resolut": 222, "dst": 223, "best": [223, 226, 230, 270], "metric_select": [223, 226, 230, 231], "partition_select": [223, 226, 230], "cv_mode": [223, 226, 230], "mean": [223, 226, 230], "copi": [223, 274], "search": [223, 228, 229, 273], "folder": 223, "cross": [223, 225, 226, 230, 234], "mode": [223, 226, 230], "thi": [225, 270, 271, 274, 275], "string": [225, 230, 231], "subset_hyperparamet": [226, 230], "r_squared_linreg": [226, 230], "subset": [226, 230], "hyperparamet": [226, 230], "parit": 226, "best_model_id": 226, "measur": 226, "warn": [226, 271], "follow": [226, 270, 271], "elbo": 226, "mse": 226, "mae": 226, "model_id": 227, "expected_pickl": [227, 228], "expect": [227, 228, 270], "pickl": [227, 228], "file": [227, 228, 229, 230, 231, 271], "miss": 227, "add_posterior_sampling_model": 228, "report_unsuccessful_run": [228, 229], "from": [228, 229, 270, 271, 273, 275, 278], "core": [228, 229], "result": [228, 229], "save": [228, 229, 230, 231], "self": [228, 229], "summary_t": 228, "add": [228, 273, 277], "print": [228, 229], "report": [228, 229, 270, 273], "statement": [228, 229], "out": [228, 229, 234], "stream": [228, 229], "complet": [228, 271], "target_cell_t": 229, "graph_model_class": 230, "baseline_model_class": 230, "partition_show": 230, "metric_show": [230, 231], "param_x": [230, 231], "um_radiu": 230, "param_hu": 230, "rename_level": 230, "yaxis_limit": [230, 231], "xtick": 230, "rotate_xtick": 230, "figsiz": 230, "3": [230, 231, 271], "4": [230, 270], "fontsiz": 230, "example_cellradiu": 230, "plot_mod": 230, "lineplot": 230, "palett": 230, "c1": 230, "c0": 230, "color": 230, "suffix": [230, 231], "best_by_hyperparam": 230, "pdf": [230, 231], "show": [230, 231, 270], "return_ax": [230, 231], "plot": [230, 231, 234], "x": [230, 231], "axi": [230, 231], "hue": 230, "renam": 230, "level": [230, 270, 271], "state": 230, "logic": [230, 271], "y": [230, 231], "limit": [230, 231], "tick": 230, "rotat": 230, "figur": 230, "font": 230, "can": [230, 271, 272, 274, 275], "boxplot": 230, "mean_lineplot": 230, "where": [230, 231], "name": [230, 231, 271], "displai": [230, 231], "ncol": 231, "target_cell_evalu": 231, "panels": 231, "sharei": 231, "panel": 231, "column": [231, 271], "cv_idx": 234, "numer": 234, "index": [234, 273], "confus": 234, "matrix": 234, "cv": 234, "scope": [234, 273], "estimatorcva": 240, "fn": [242, 243, 247, 248, 252, 253, 257, 258, 262, 263, 267, 268], "save_weight": [242, 247, 252, 257, 262, 267], "weight": [242, 247, 252, 257, 262, 267], "summari": [242, 247, 252, 257, 262, 267], "statist": [242, 247, 252, 257, 262, 267], "durat": [243, 248, 253, 258, 263, 268], "estimatorcvaencem": 245, "estimatoredncem": 255, "estimatorinteract": 260, "estimatorlinear": 265, "david": 269, "fischer": [269, 275], "helmholtz": 269, "muenchen": 269, "de": 269, "anna": 269, "schaar": [269, 275], "yet": 269, "why": 269, "first": [269, 271], "In": [270, 271], "interest": [270, 271], "foster": 270, "an": [270, 271, 272, 277], "open": [270, 271, 277], "welcom": [270, 271], "environ": [270, 272, 273], "we": [270, 277], "maintain": [270, 271], "make": [270, 271, 274], "particip": 270, "project": [270, 273], "commun": [270, 275], "harass": 270, "free": [270, 271, 277], "experi": 270, "everyon": 270, "regardless": 270, "ag": 270, "bodi": 270, "disabl": 270, "ethnic": 270, "gender": 270, "ident": 270, "express": 270, "nation": 270, "person": 270, "appear": 270, "race": 270, "religion": 270, "sexual": 270, "orient": 270, "exampl": [270, 271], "behavior": 270, "contribut": [270, 271], "creat": [270, 271, 275], "inclus": 270, "languag": 270, "Being": 270, "respect": 270, "differ": 270, "viewpoint": 270, "gracefulli": 270, "accept": [270, 271], "construct": 270, "critic": 270, "focus": 270, "what": 270, "empathi": 270, "toward": 270, "other": 270, "member": 270, "unaccept": 270, "The": [270, 271, 274, 278], "imageri": 270, "unwelcom": 270, "attent": 270, "advanc": [270, 278], "troll": 270, "insult": 270, "derogatori": 270, "comment": 270, "polit": 270, "attack": 270, "public": [270, 271, 274], "privat": 270, "publish": 270, "physic": 270, "electron": 270, "address": 270, "explicit": 270, "permiss": 270, "reason": 270, "consid": [270, 271], "inappropri": 270, "profession": 270, "clarifi": 270, "take": 270, "appropri": 270, "fair": 270, "correct": 270, "action": 270, "instanc": 270, "have": [270, 271, 274], "right": 270, "remov": 270, "edit": 270, "reject": 270, "commit": [270, 271], "wiki": 270, "issu": [270, 271, 277], "align": 270, "ban": 270, "temporarili": 270, "perman": 270, "thei": [270, 275], "deem": 270, "threaten": 270, "offens": 270, "harm": 270, "appli": 270, "both": 270, "within": 270, "when": [270, 271], "individu": 270, "repres": 270, "its": 270, "offici": 270, "e": [270, 271], "mail": 270, "post": 270, "via": [270, 271, 275], "social": 270, "media": 270, "account": 270, "act": 270, "appoint": 270, "onlin": 270, "offlin": 270, "event": 270, "represent": 270, "mai": 270, "further": 270, "defin": 270, "abus": 270, "otherwis": 270, "team": 270, "review": 270, "investig": 270, "complaint": 270, "respond": 270, "wai": 270, "circumst": 270, "oblig": 270, "confidenti": 270, "regard": 270, "incid": 270, "detail": 270, "specif": [270, 271], "polici": 270, "separ": [270, 277], "who": 270, "do": [270, 271], "good": 270, "faith": 270, "face": 270, "temporari": 270, "repercuss": 270, "determin": 270, "": [270, 275], "leadership": 270, "adapt": 270, "version": 270, "avail": [270, 271], "http": [270, 271, 274], "www": 270, "org": 270, "html": 270, "thank": 271, "you": [271, 274, 275, 277], "under": 271, "bsd": 271, "licens": 271, "form": 271, "pull": 271, "here": 271, "import": [271, 278], "resourc": 271, "code": [271, 273], "document": 271, "tracker": 271, "conduct": [271, 273], "overview": 271, "ncem": [271, 274, 278], "instal": [271, 273], "clone": [271, 274], "local": 271, "repositori": [271, 274, 275, 277], "branch": 271, "pip": [271, 274, 275], "cd": 271, "target_directori": 271, "git": [271, 274], "github": [271, 274], "com": [271, 274], "theislab": [271, 274], "checkout": 271, "go": 271, "new": 271, "py": 271, "should": 271, "ideal": 271, "author": 271, "g": 271, "dataloaderzhang": 271, "function": 271, "_register_celldata": 271, "_register_img_celldata": 271, "_register_graph_featur": 271, "anndata": 271, "celldata": 271, "store": 271, "var_nam": 271, "annot": 271, "ob": 271, "un": 271, "metadata": 271, "convent": 271, "automat": 271, "one": 271, "ad": 271, "case": 271, "addit": 271, "diseas": 271, "statu": 271, "addition": 271, "cell_type_merge_dict": 271, "provid": [271, 272, 277], "merg": 271, "subsequ": 271, "help": 271, "fine": 271, "coarser": 271, "want": 271, "loader": 271, "through": [271, 274], "note": [271, 274], "also": 271, "just": 271, "keep": 271, "sure": 271, "enter": 271, "descript": 271, "next": 271, "date": 271, "dev": 271, "your_branch_nam": 271, "push": 271, "feel": [271, 277], "need": 271, "python": [271, 272, 274, 275], "7": 271, "tool": [271, 272], "poetri": [271, 274], "nox": 271, "them": 271, "packag": [271, 275], "requir": [271, 274], "now": 271, "session": 271, "command": [271, 274, 276], "line": [271, 276], "interfac": [271, 276, 278], "suit": 271, "For": 271, "invok": 271, "unit": 271, "like": [271, 277], "locat": 271, "written": 271, "pytest": 271, "framework": 271, "against": 271, "meet": 271, "guidelin": 271, "must": 271, "pass": 271, "error": 271, "high": 271, "coverag": 271, "accordingli": 271, "To": [271, 274], "lint": 271, "format": 271, "check": 271, "befor": 271, "hook": 271, "It": 271, "recommend": 271, "work": 271, "anyth": 271, "allow": 271, "chanc": 271, "talk": 271, "owner": 271, "approach": 271, "transcriptomn": 272, "singl": [272, 275], "credit": 273, "stabl": 273, "releas": 273, "api": 273, "estim": 273, "tutori": 273, "ecosystem": 273, "squidpi": 273, "scanpi": 273, "refer": 273, "contributor": 273, "guid": [273, 274], "how": 273, "dataload": 273, "bug": 273, "request": 273, "your": [273, 274], "develop": 273, "submit": 273, "chang": 273, "lead": 273, "coven": 273, "our": 273, "pledg": 273, "respons": 273, "enforc": 273, "modul": 273, "page": 273, "prefer": 274, "alwai": 274, "most": 274, "recent": 274, "don": 274, "t": 274, "process": 274, "download": 274, "repo": 274, "pleas": 274, "either": 274, "Or": 274, "tarbal": 274, "curl": 274, "ojl": 274, "main": 274, "onc": 274, "manuscript": 275, "d": 275, "A": [275, 277], "c": 275, "f": 275, "2021": 275, "preprint": 275, "pypi": 275, "wa": 275, "cookietempl": 275, "cookiecutt": 275, "hypermodern_python_cookiecutt": 275, "merfish": 277, "brain": 277, "would": 277, "more": 277, "contibut": 277, "wrap": 278, "tensorflow": 278, "compat": 278, "pool": 278, "across": 278}, "objects": {"ncem": [[276, 0, 0, "-", "__main__"], [278, 0, 0, "-", "estimators"], [278, 0, 0, "-", "models"], [278, 0, 0, "-", "train"]], "ncem.estimators": [[0, 1, 1, "", "Estimator"], [52, 1, 1, "", "EstimatorCVAE"], [73, 1, 1, "", "EstimatorCVAEncem"], [94, 1, 1, "", "EstimatorED"], [114, 1, 1, "", "EstimatorEDncem"], [136, 1, 1, "", "EstimatorGraph"], [156, 1, 1, "", "EstimatorInteractions"], [176, 1, 1, "", "EstimatorLinear"], [196, 1, 1, "", "EstimatorNoGraph"]], "ncem.estimators.Estimator": [[1, 2, 1, "", "a"], [2, 2, 1, "", "adj_type"], [3, 2, 1, "", "complete_img_keys"], [4, 2, 1, "", "cond_depth"], [5, 2, 1, "", "cond_type"], [6, 2, 1, "", "covar_selection"], [7, 2, 1, "", "domains"], [8, 3, 1, "", "evaluate_any"], [9, 3, 1, "", "evaluate_per_node_type"], [10, 3, 1, "", "get_data"], [11, 2, 1, "", "graph_covar"], [12, 2, 1, "", "graph_covar_names"], [13, 2, 1, "", "h_0"], [14, 2, 1, "", "h_1"], [15, 4, 1, "", "img_keys_all"], [16, 2, 1, "", "img_to_patient_dict"], [17, 3, 1, "", "init_model"], [18, 2, 1, "", "log_transform"], [19, 2, 1, "", "max_nodes"], [20, 2, 1, "", "model_type"], [21, 2, 1, "", "n_domains"], [22, 2, 1, "", "n_eval_nodes_per_graph"], [23, 2, 1, "", "n_features_0"], [24, 2, 1, "", "n_features_1"], [25, 2, 1, "", "n_features_standard"], [26, 2, 1, "", "n_features_type"], [27, 2, 1, "", "n_graph_covariates"], [28, 2, 1, "", "n_node_covariates"], [29, 2, 1, "", "node_covar"], [30, 2, 1, "", "node_feature_names"], [31, 2, 1, "", "node_type_names"], [32, 2, 1, "", "node_types"], [33, 4, 1, "", "nodes_idx_all"], [34, 2, 1, "", "nodes_idx_eval"], [35, 2, 1, "", "nodes_idx_test"], [36, 2, 1, "", "nodes_idx_train"], [37, 2, 1, "", "output_layer"], [38, 4, 1, "", "patient_ids_bytarget"], [39, 4, 1, "", "patient_ids_unique"], [40, 3, 1, "", "predict"], [41, 3, 1, "", "pretrain_decoder"], [42, 2, 1, "", "size_factors"], [43, 3, 1, "", "split_data_given"], [44, 3, 1, "", "split_data_node"], [45, 3, 1, "", "split_data_target_cell"], [46, 2, 1, "", "steps_per_epoch"], [47, 3, 1, "", "train"], [48, 3, 1, "", "train_aggressive"], [49, 3, 1, "", "train_normal"], [50, 2, 1, "", "validation_steps"], [51, 2, 1, "", "vi_model"]], "ncem.estimators.EstimatorCVAE": [[53, 3, 1, "", "evaluate_any"], [54, 3, 1, "", "evaluate_any_posterior_sampling"], [55, 3, 1, "", "evaluate_per_node_type"], [56, 3, 1, "", "get_data"], [57, 4, 1, "", "img_keys_all"], [58, 3, 1, "", "init_model"], [59, 4, 1, "", "nodes_idx_all"], [60, 2, 1, "", "nodes_idx_eval"], [61, 2, 1, "", "nodes_idx_test"], [62, 2, 1, "", "nodes_idx_train"], [63, 4, 1, "", "patient_ids_bytarget"], [64, 4, 1, "", "patient_ids_unique"], [65, 3, 1, "", "predict"], [66, 3, 1, "", "pretrain_decoder"], [67, 3, 1, "", "split_data_given"], [68, 3, 1, "", "split_data_node"], [69, 3, 1, "", "split_data_target_cell"], [70, 3, 1, "", "train"], [71, 3, 1, "", "train_aggressive"], [72, 3, 1, "", "train_normal"]], "ncem.estimators.EstimatorCVAEncem": [[74, 3, 1, "", "evaluate_any"], [75, 3, 1, "", "evaluate_any_posterior_sampling"], [76, 3, 1, "", "evaluate_per_node_type"], [77, 3, 1, "", "get_data"], [78, 4, 1, "", "img_keys_all"], [79, 3, 1, "", "init_model"], [80, 4, 1, "", "nodes_idx_all"], [81, 2, 1, "", "nodes_idx_eval"], [82, 2, 1, "", "nodes_idx_test"], [83, 2, 1, "", "nodes_idx_train"], [84, 4, 1, "", "patient_ids_bytarget"], [85, 4, 1, "", "patient_ids_unique"], [86, 3, 1, "", "predict"], [87, 3, 1, "", "pretrain_decoder"], [88, 3, 1, "", "split_data_given"], [89, 3, 1, "", "split_data_node"], [90, 3, 1, "", "split_data_target_cell"], [91, 3, 1, "", "train"], [92, 3, 1, "", "train_aggressive"], [93, 3, 1, "", "train_normal"]], "ncem.estimators.EstimatorED": [[95, 3, 1, "", "evaluate_any"], [96, 3, 1, "", "evaluate_per_node_type"], [97, 3, 1, "", "get_data"], [98, 4, 1, "", "img_keys_all"], [99, 3, 1, "", "init_model"], [100, 4, 1, "", "nodes_idx_all"], [101, 2, 1, "", "nodes_idx_eval"], [102, 2, 1, "", "nodes_idx_test"], [103, 2, 1, "", "nodes_idx_train"], [104, 4, 1, "", "patient_ids_bytarget"], [105, 4, 1, "", "patient_ids_unique"], [106, 3, 1, "", "predict"], [107, 3, 1, "", "pretrain_decoder"], [108, 3, 1, "", "split_data_given"], [109, 3, 1, "", "split_data_node"], [110, 3, 1, "", "split_data_target_cell"], [111, 3, 1, "", "train"], [112, 3, 1, "", "train_aggressive"], [113, 3, 1, "", "train_normal"]], "ncem.estimators.EstimatorEDncem": [[115, 3, 1, "", "evaluate_any"], [116, 3, 1, "", "evaluate_per_node_type"], [117, 3, 1, "", "get_data"], [118, 3, 1, "", "get_decoding_weights"], [119, 4, 1, "", "img_keys_all"], [120, 3, 1, "", "init_model"], [121, 4, 1, "", "nodes_idx_all"], [122, 2, 1, "", "nodes_idx_eval"], [123, 2, 1, "", "nodes_idx_test"], [124, 2, 1, "", "nodes_idx_train"], [125, 4, 1, "", "patient_ids_bytarget"], [126, 4, 1, "", "patient_ids_unique"], [127, 3, 1, "", "predict"], [128, 3, 1, "", "predict_embedding_any"], [129, 3, 1, "", "pretrain_decoder"], [130, 3, 1, "", "split_data_given"], [131, 3, 1, "", "split_data_node"], [132, 3, 1, "", "split_data_target_cell"], [133, 3, 1, "", "train"], [134, 3, 1, "", "train_aggressive"], [135, 3, 1, "", "train_normal"]], "ncem.estimators.EstimatorGraph": [[137, 3, 1, "", "evaluate_any"], [138, 3, 1, "", "evaluate_per_node_type"], [139, 3, 1, "", "get_data"], [140, 4, 1, "", "img_keys_all"], [141, 3, 1, "", "init_model"], [142, 4, 1, "", "nodes_idx_all"], [143, 2, 1, "", "nodes_idx_eval"], [144, 2, 1, "", "nodes_idx_test"], [145, 2, 1, "", "nodes_idx_train"], [146, 4, 1, "", "patient_ids_bytarget"], [147, 4, 1, "", "patient_ids_unique"], [148, 3, 1, "", "predict"], [149, 3, 1, "", "pretrain_decoder"], [150, 3, 1, "", "split_data_given"], [151, 3, 1, "", "split_data_node"], [152, 3, 1, "", "split_data_target_cell"], [153, 3, 1, "", "train"], [154, 3, 1, "", "train_aggressive"], [155, 3, 1, "", "train_normal"]], "ncem.estimators.EstimatorInteractions": [[157, 3, 1, "", "evaluate_any"], [158, 3, 1, "", "evaluate_per_node_type"], [159, 3, 1, "", "get_data"], [160, 4, 1, "", "img_keys_all"], [161, 3, 1, "", "init_model"], [162, 4, 1, "", "nodes_idx_all"], [163, 2, 1, "", "nodes_idx_eval"], [164, 2, 1, "", "nodes_idx_test"], [165, 2, 1, "", "nodes_idx_train"], [166, 4, 1, "", "patient_ids_bytarget"], [167, 4, 1, "", "patient_ids_unique"], [168, 3, 1, "", "predict"], [169, 3, 1, "", "pretrain_decoder"], [170, 3, 1, "", "split_data_given"], [171, 3, 1, "", "split_data_node"], [172, 3, 1, "", "split_data_target_cell"], [173, 3, 1, "", "train"], [174, 3, 1, "", "train_aggressive"], [175, 3, 1, "", "train_normal"]], "ncem.estimators.EstimatorLinear": [[177, 3, 1, "", "evaluate_any"], [178, 3, 1, "", "evaluate_per_node_type"], [179, 3, 1, "", "get_data"], [180, 4, 1, "", "img_keys_all"], [181, 3, 1, "", "init_model"], [182, 4, 1, "", "nodes_idx_all"], [183, 2, 1, "", "nodes_idx_eval"], [184, 2, 1, "", "nodes_idx_test"], [185, 2, 1, "", "nodes_idx_train"], [186, 4, 1, "", "patient_ids_bytarget"], [187, 4, 1, "", "patient_ids_unique"], [188, 3, 1, "", "predict"], [189, 3, 1, "", "pretrain_decoder"], [190, 3, 1, "", "split_data_given"], [191, 3, 1, "", "split_data_node"], [192, 3, 1, "", "split_data_target_cell"], [193, 3, 1, "", "train"], [194, 3, 1, "", "train_aggressive"], [195, 3, 1, "", "train_normal"]], "ncem.estimators.EstimatorNoGraph": [[197, 3, 1, "", "evaluate_any"], [198, 3, 1, "", "evaluate_per_node_type"], [199, 3, 1, "", "get_data"], [200, 4, 1, "", "img_keys_all"], [201, 3, 1, "", "init_model"], [202, 4, 1, "", "nodes_idx_all"], [203, 2, 1, "", "nodes_idx_eval"], [204, 2, 1, "", "nodes_idx_test"], [205, 2, 1, "", "nodes_idx_train"], [206, 4, 1, "", "patient_ids_bytarget"], [207, 4, 1, "", "patient_ids_unique"], [208, 3, 1, "", "predict"], [209, 3, 1, "", "pretrain_decoder"], [210, 3, 1, "", "split_data_given"], [211, 3, 1, "", "split_data_node"], [212, 3, 1, "", "split_data_target_cell"], [213, 3, 1, "", "train"], [214, 3, 1, "", "train_aggressive"], [215, 3, 1, "", "train_normal"]], "ncem.models": [[216, 1, 1, "", "ModelCVAE"], [217, 1, 1, "", "ModelCVAEncem"], [218, 1, 1, "", "ModelED"], [219, 1, 1, "", "ModelEDncem"], [220, 1, 1, "", "ModelInteractions"], [221, 1, 1, "", "ModelLinear"]], "ncem.train": [[222, 1, 1, "", "GridSearchContainer"], [239, 1, 1, "", "TrainModelCVAE"], [244, 1, 1, "", "TrainModelCVAEncem"], [249, 1, 1, "", "TrainModelED"], [254, 1, 1, "", "TrainModelEDncem"], [259, 1, 1, "", "TrainModelInteractions"], [264, 1, 1, "", "TrainModelLinear"]], "ncem.train.GridSearchContainer": [[223, 3, 1, "", "copy_best_model"], [224, 2, 1, "", "cv_ids"], [225, 4, 1, "", "cv_keys"], [226, 3, 1, "", "get_best_model_id"], [227, 3, 1, "", "get_info"], [228, 3, 1, "", "load_gs"], [229, 3, 1, "", "load_target_cell_evaluation"], [230, 3, 1, "", "plot_best_model_by_hyperparam"], [231, 3, 1, "", "plot_target_cell_evaluation"], [232, 2, 1, "", "run_ids_clean"], [233, 2, 1, "", "runparams"], [234, 3, 1, "", "select_cv"], [235, 2, 1, "", "source_gs"], [236, 2, 1, "", "target_cell_evals"], [237, 2, 1, "", "target_cell_indices"], [238, 2, 1, "", "target_cell_runparams"]], "ncem.train.TrainModelCVAE": [[240, 2, 1, "", "estimator"], [241, 3, 1, "", "init_estim"], [242, 3, 1, "", "save"], [243, 3, 1, "", "save_time"]], "ncem.train.TrainModelCVAEncem": [[245, 2, 1, "", "estimator"], [246, 3, 1, "", "init_estim"], [247, 3, 1, "", "save"], [248, 3, 1, "", "save_time"]], "ncem.train.TrainModelED": [[250, 2, 1, "", "estimator"], [251, 3, 1, "", "init_estim"], [252, 3, 1, "", "save"], [253, 3, 1, "", "save_time"]], "ncem.train.TrainModelEDncem": [[255, 2, 1, "", "estimator"], [256, 3, 1, "", "init_estim"], [257, 3, 1, "", "save"], [258, 3, 1, "", "save_time"]], "ncem.train.TrainModelInteractions": [[260, 2, 1, "", "estimator"], [261, 3, 1, "", "init_estim"], [262, 3, 1, "", "save"], [263, 3, 1, "", "save_time"]], "ncem.train.TrainModelLinear": [[265, 2, 1, "", "estimator"], [266, 3, 1, "", "init_estim"], [267, 3, 1, "", "save"], [268, 3, 1, "", "save_time"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:attribute", "3": "py:method", "4": "py:property"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "attribute", "Python attribute"], "3": ["py", "method", "Python method"], "4": ["py", "property", "Python property"]}, "titleterms": {"ncem": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 273, 275], "estim": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 240, 245, 250, 255, 260, 265, 278], "adj_typ": 2, "complete_img_kei": 3, "cond_depth": 4, "cond_typ": 5, "covar_select": 6, "domain": 7, "evaluate_ani": [8, 53, 74, 95, 115, 137, 157, 177, 197], "evaluate_per_node_typ": [9, 55, 76, 96, 116, 138, 158, 178, 198], "get_data": [10, 56, 77, 97, 117, 139, 159, 179, 199], "graph_covar": 11, "graph_covar_nam": 12, "h_0": 13, "h_1": 14, "img_keys_al": [15, 57, 78, 98, 119, 140, 160, 180, 200], "img_to_patient_dict": 16, "init_model": [17, 58, 79, 99, 120, 141, 161, 181, 201], "log_transform": 18, "max_nod": 19, "model_typ": 20, "n_domain": 21, "n_eval_nodes_per_graph": 22, "n_features_0": 23, "n_features_1": 24, "n_features_standard": 25, "n_features_typ": 26, "n_graph_covari": 27, "n_node_covari": 28, "node_covar": 29, "node_feature_nam": 30, "node_type_nam": 31, "node_typ": 32, "nodes_idx_al": [33, 59, 80, 100, 121, 142, 162, 182, 202], "nodes_idx_ev": [34, 60, 81, 101, 122, 143, 163, 183, 203], "nodes_idx_test": [35, 61, 82, 102, 123, 144, 164, 184, 204], "nodes_idx_train": [36, 62, 83, 103, 124, 145, 165, 185, 205], "output_lay": 37, "patient_ids_bytarget": [38, 63, 84, 104, 125, 146, 166, 186, 206], "patient_ids_uniqu": [39, 64, 85, 105, 126, 147, 167, 187, 207], "predict": [40, 65, 86, 106, 127, 148, 168, 188, 208], "pretrain_decod": [41, 66, 87, 107, 129, 149, 169, 189, 209], "size_factor": 42, "split_data_given": [43, 67, 88, 108, 130, 150, 170, 190, 210], "split_data_nod": [44, 68, 89, 109, 131, 151, 171, 191, 211], "split_data_target_cel": [45, 69, 90, 110, 132, 152, 172, 192, 212], "steps_per_epoch": 46, "train": [47, 70, 91, 111, 133, 153, 173, 193, 213, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 278], "train_aggress": [48, 71, 92, 112, 134, 154, 174, 194, 214], "train_norm": [49, 72, 93, 113, 135, 155, 175, 195, 215], "validation_step": 50, "vi_model": 51, "estimatorcva": [52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72], "evaluate_any_posterior_sampl": [54, 75], "estimatorcvaencem": [73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93], "estimatoredncem": [114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135], "get_decoding_weight": 118, "predict_embedding_ani": 128, "estimatorgraph": [136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155], "estimatorinteract": [156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175], "estimatorlinear": [176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195], "estimatornograph": [196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215], "model": [216, 217, 218, 219, 220, 221, 278], "modelcva": 216, "modelcvaencem": 217, "modeledncem": 219, "modelinteract": 220, "modellinear": 221, "gridsearchcontain": [222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238], "copy_best_model": 223, "cv_id": 224, "cv_kei": 225, "get_best_model_id": 226, "get_info": 227, "load_g": 228, "load_target_cell_evalu": 229, "plot_best_model_by_hyperparam": 230, "plot_target_cell_evalu": 231, "run_ids_clean": 232, "runparam": 233, "select_cv": 234, "source_g": 235, "target_cell_ev": 236, "target_cell_indic": 237, "target_cell_runparam": 238, "trainmodelcva": [239, 240, 241, 242, 243], "init_estim": [241, 246, 251, 256, 261, 266], "save": [242, 247, 252, 257, 262, 267], "save_tim": [243, 248, 253, 258, 263, 268], "trainmodelcvaencem": [244, 245, 246, 247, 248], "trainmodel": [249, 250, 251, 252, 253], "trainmodeledncem": [254, 255, 256, 257, 258], "trainmodelinteract": [259, 260, 261, 262, 263], "trainmodellinear": [264, 265, 266, 267, 268], "credit": [269, 275], "develop": [269, 271], "lead": 269, "contributor": [269, 270, 271], "coven": 270, "code": 270, "conduct": 270, "our": 270, "pledg": 270, "standard": 270, "respons": 270, "scope": 270, "enforc": 270, "attribut": 270, "guid": 271, "how": 271, "add": 271, "dataload": 271, "report": 271, "bug": 271, "request": 271, "featur": [271, 275], "set": 271, "up": 271, "your": 271, "environ": 271, "test": 271, "project": 271, "submit": 271, "chang": 271, "ecosystem": 272, "squidpi": 272, "scanpi": 272, "welcom": 273, "": 273, "document": 273, "content": 273, "indic": 273, "tabl": 273, "instal": [274, 275], "stabl": 274, "releas": 274, "from": 274, "sourc": 274, "refer": 276, "tutori": 277, "api": 278, "class": 278, "trainer": 278, "grid": 278, "search": 278, "summari": 278}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 6, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx.ext.intersphinx": 1, "sphinx": 56}})